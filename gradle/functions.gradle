/*
 * Licensed to the Fintech Open Source Foundation (FINOS) under one or
 * more contributor license agreements. See the NOTICE file distributed
 * with this work for additional information regarding copyright ownership.
 * FINOS licenses this file to you under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with the
 * License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


def getVersionFromGit() {

    def osName = System.properties.getProperty('os.name').toLowerCase()
    def command = osName.contains("win")
        ? "powershell -ExecutionPolicy Bypass -File dev\\version.ps1"
        : "dev/version.sh"

    // Default CWD for Process.execute on Windows under IDEA 2021.1 is under the Gradle cache location
    // Force the version detection script to be called from the repo root dir

    def proc = command.execute(null, rootDir)
    def exitCode = proc.waitFor()

    if (exitCode != 0)
        throw new Exception("Get version command failed with error code ${exitCode}")

    def versionNumber = proc.text.strip()

    println("TRAC Version: ${versionNumber}")

    return versionNumber
}


def addVersionInfo(SourceSet sourceSet, String serviceName) {

    def propsFileDir = "${project.buildDir}/generated/versionInfo/resources"

    task generateVersionInfo {

        def props = new Properties()
        props.setProperty("trac.component.name", serviceName)
        props.setProperty("trac.component.version", "${project.version}")

        def propsFilePath = "${propsFileDir}/version.properties"
        def propsFile = file(propsFilePath)
        propsFile.parentFile.mkdirs()
        propsFile.withWriter { props.store(it, null) }
    }

    sourceSet.resources {
        srcDir propsFileDir
    }

    tasks.getByName(sourceSet.getProcessResourcesTaskName())
         .dependsOn("generateVersionInfo")

    jar {
        manifest.attributes(
            'Implementation-Title': serviceName,
            'Implementation-Version': "${project.version}")
    }
}


def isFeatureEnabled(String key) {

    def env = System.getenv()
    def buildKey = (String) "BUILD_${key}"

    if (env.containsKey(buildKey) && Boolean.parseBoolean(env.get(buildKey)))
        return true

    if (env.containsKey(buildKey))
        return Boolean.parseBoolean(env.get(buildKey))

    if (project.hasProperty("BUILD_ALL_PLUGINS") && project.property("BUILD_ALL_PLUGINS"))
        return true

    if (project.hasProperty(buildKey) && project.property(buildKey))
        return project.property(buildKey)

    return false
}


def enableBuildTimePlugins(List<String> filters, boolean optional = false) {

    for (key in ext.properties.keySet()) {

        // Look for BUILD flags only
        if (!key.startsWith("BUILD_"))
            continue

        var plugin = key.substring("BUILD_".length())
        var words = plugin.split("_")

        // Only look at plugins included in the filter
        // (Do not put every plugin on every service)
        if (!words.any {w -> filters.contains(w)})
            continue

        // Only look at plugins that are build-time enabled
        if (!isFeatureEnabled(plugin))
            continue

        var dependencyKey = "DEPEND_" + plugin
        var dependency = ext.properties.get(dependencyKey)

        if (dependency == null) {
            if (!optional)
                throw new Exception("Plugin ${plugin} could not be enabled (no DEPEND_ key defined in plugins.gradle)")
            else
                continue
        }

        println("Enabling plugin: ${plugin}")

        dependencies {
            runtimeOnly dependency
        }
    }
}


ext {
    addVersionInfo = { SourceSet sourceSet, String name -> this.addVersionInfo(sourceSet, name) }
    getVersionFromGit = { -> getVersionFromGit() }
    isFeatureEnabled = { String key -> this.isFeatureEnabled(key) }
    enableBuildTimePlugins = { List<String> filters, boolean optional = false -> enableBuildTimePlugins(filters, optional) }
    OPTIONAL = true
}
