/*
 * Copyright 2020 Accenture Global Solutions Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

repositories {
    mavenCentral()
}

dependencies {

    // Logging with SLF 4J, available in all Java modules
    implementation group: 'org.slf4j', name: 'slf4j-api', version: "$slf4j_version"

    // JUnit testing framework, available for testing in all Java modules
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: "$junit_version"
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: "$junit_version"
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: "$junit_version"

    testImplementation group: 'org.mockito', name: 'mockito-core', version: "$mockito_version"
}

java {

    // We want to allow compiling with higher versions of Java as well
    // Setting toolchain.languageVersion does not make it easy to do this
    // So, stick to the old source/target compatibility settings for now

    sourceCompatibility = "$java_min_version"
    targetCompatibility = "$java_min_version"

    // Gradle property to control Javadoc - turned on by default
    if (!project.hasProperty("includeJavadoc") || project.property("includeJavadoc")) {
        withJavadocJar()
        javadocJar.dependsOn classes
    }

    // Gradle property to control source Jar output - turned off by default
    if (project.hasProperty("includeSources") && project.property("includeSources")) {
        withSourcesJar()
        sourcesJar.dependsOn classes
    }
}

tasks.withType(JavaCompile).configureEach {

    // Allow UTF-8 encoding in source files
    options.encoding = 'UTF-8'
}

compileJava {

    // This is needed for automatic logging calls into interfaces
    options.compilerArgs << '-parameters'
}

test {

    useJUnitPlatform {
        excludeTags "integration"
        excludeTags "slow"
    }

    // JVM flags needed for Arrow / Netty / gRPC to access native memory
    jvmArgs("--add-opens", "java.base/jdk.internal.misc=ALL-UNNAMED")
    jvmArgs("--add-opens", "java.base/java.nio=ALL-UNNAMED")
    systemProperty("io.netty.tryReflectionSetAccessible", true)

    // Allow UTF-8 literals in test code
    systemProperty("file.encoding", "utf-8")
}

task integration(type: Test) {

    group = 'verification'
    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath
    workingDir = rootProject.projectDir

    def integrationTags = System.getProperty("integrationTags", "")

    doFirst {
        if (integrationTags.isBlank())
            throw new Exception("Missing required property [integrationTags] (use -DintegrationTags=\"...\")")
    }

    useJUnitPlatform {
        includeTags(integrationTags)
    }

    // JVM flags needed for Arrow / Netty / gRPC to access native memory
    jvmArgs("--add-opens", "java.base/jdk.internal.misc=ALL-UNNAMED")
    jvmArgs("--add-opens", "java.base/java.nio=ALL-UNNAMED")
    systemProperty("io.netty.tryReflectionSetAccessible", true)
}
