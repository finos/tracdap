<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2021 Accenture Global Solutions Limited
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<suppressions xmlns="https://jeremylong.github.io/DependencyCheck/dependency-suppression.1.3.xsd">


    <!-- ====================== -->
    <!-- Wrong package detected -->
    <!-- ====================== -->

    <!--
    These are false positives where the vulnerability relates to an entirely different package,
    i.e. the check is mis-identifying the pacakge. These will always be false positives and can
    be left here indefinitely.

    E.g. Vulnerabilities in mysql should never be reported against flyway-mysql,
    they are different packages with different versioning schemes.
    -->

    <!-- flyway-mysql driver is detected as part of MySQL -->
    <suppress>
        <packageUrl regex="true">^pkg:maven/org\.flywaydb/flyway\-mysql@.*$</packageUrl>
        <cpe>cpe:/a:mysql:mysql</cpe>
    </suppress>

    <!-- google-http-client-gson is detected as google:gson -->
    <suppress>
        <packageUrl regex="true">^pkg:maven/com\.google\.http\-client/google\-http\-client\-gson@.*$</packageUrl>
        <cpe>cpe:/a:google:gson</cpe>
    </suppress>

    <!-- trac-api-services is detected as services_project:services -->
    <suppress>
        <packageUrl regex="true">^pkg:maven/org\.finos\.tracdap/tracdap\-api\-services@.*$</packageUrl>
        <cpe>cpe:/a:services_project:services</cpe>
    </suppress>

    <!-- commons-net is detected as part of commons-cli -->
    <suppress>
        <packageUrl regex="true">^pkg:maven/commons\-cli/commons\-cli@.*$</packageUrl>
        <cpe>cpe:/a:apache:commons_net</cpe>
    </suppress>

    <!-- commons-net is detected as part of commons-codec -->
    <suppress>
        <packageUrl regex="true">^pkg:maven/commons\-codec/commons\-codec@.*$</packageUrl>
        <cpe>cpe:/a:apache:commons_net</cpe>
    </suppress>

    <!-- commons-net is detected as part of commons-logging -->
    <suppress>
        <packageUrl regex="true">^pkg:maven/commons\-logging/commons\-logging@.*$</packageUrl>
        <cpe>cpe:/a:apache:commons_net</cpe>
    </suppress>

    <!-- Flat buffers detected as flat_project, a JavaScript library: https://github.com/hughsk/flat -->
    <suppress>
        <packageUrl regex="true">^pkg:maven/com\.google\.flatbuffers/flatbuffers\-java@.*$</packageUrl>
        <cpe>cpe:/a:flat_project:flat</cpe>
    </suppress>

    <!-- Two utils libs in the AWS SDK mis-identified as part of an old abandoned utils project -->
    <!-- https://www.cve.org/CVERecord?id=CVE-2021-4277 -->
    <!-- https://github.com/fredsmith/utils/commit/dbab1b66955eeb3d76b34612b358307f5c4e3944 -->

    <suppress>
        <packageUrl regex="true">^pkg:maven/software\.amazon\.awssdk/json\-utils@.*$</packageUrl>
        <cpe>cpe:/a:utils_project:utils</cpe>
    </suppress>

    <suppress>
        <packageUrl regex="true">^pkg:maven/software\.amazon\.awssdk/utils@.*$</packageUrl>
        <cpe>cpe:/a:utils_project:utils</cpe>
    </suppress>

    <!-- Several packages that are mis-identified as being part of this personal JSON project -->
    <!-- https://github.com/stleary/JSON-java -->
    <!-- https://nvd.nist.gov/vuln/detail/CVE-2022-45688#vulnConfigurationsArea -->

    <suppress>
        <packageUrl regex="true">^pkg:maven/com\.google\.http\-client/google\-http\-client\-gson@.*$</packageUrl>
        <cpe>cpe:/a:json-java_project:json-java</cpe>
    </suppress>

    <suppress>
        <packageUrl regex="true">^pkg:maven/com\.google\.http\-client/google\-http\-client\-jackson2@.*$</packageUrl>
        <cpe>cpe:/a:json-java_project:json-java</cpe>
    </suppress>

    <suppress>
        <packageUrl regex="true">^pkg:maven/com\.google\.api/gax\-httpjson@.*$</packageUrl>
        <cpe>cpe:/a:json-java_project:json-java</cpe>
    </suppress>

    <suppress>
        <packageUrl regex="true">^pkg:maven/software\.amazon\.awssdk/json\-utils@.*$</packageUrl>
        <cpe>cpe:/a:json-java_project:json-java</cpe>
    </suppress>

    <suppress>
        <packageUrl regex="true">^pkg:maven/com\.azure/azure\-json@.*$</packageUrl>
        <cpe>cpe:/a:json-java_project:json-java</cpe>
    </suppress>

    <suppress>
        <packageUrl regex="true">^pkg:maven/com\.fasterxml\.jackson\.core/jackson\-core@.*$</packageUrl>
        <cpe>cpe:/a:json-java_project:json-java</cpe>
    </suppress>

    <!-- Vulnerabilities in the YAML implementation for Go language detected as yaml_project -->
    <!-- Come on OWASP - we're not even using the GO language! -->

    <suppress>
        <packageUrl regex="true">^pkg:maven/org\.yaml/snakeyaml@.*$</packageUrl>
        <cpe>cpe:/a:yaml_project:yaml</cpe>
    </suppress>

    <!-- Another wrong language - part of the Jackson XML stack detected as xml-rs for Rust -->

    <suppress>
        <packageUrl regex="true">^pkg:maven/com\.sun\.xml\.bind\.jaxb/isorelax@.*$</packageUrl>
        <cpe>cpe:/a:xml_library_project:xml_library</cpe>
    </suppress>

    <!-- This is an issue in Jackson's woodstox impl that was fixed in 6.4.0, latest Jackson uses 6.5.1 -->
    <!-- OWASP is detecting the Codehaus dependency stax2-api 4.2.1 as being Jackson woodstox < 6.4.0 -->
    <!-- https://nvd.nist.gov/vuln/detail/CVE-2022-40152 -->
    <!-- https://github.com/FasterXML/woodstox/issues/160 -->

    <suppress>
        <packageUrl regex="true">^pkg:maven/org\.codehaus\.woodstox/stax2\-api@.*$</packageUrl>
        <cpe>cpe:/a:fasterxml:woodstox</cpe>
    </suppress>

    <!-- Another mis-detection, accessors-smart is not either of the JavaScript projects -->

    <suppress>
        <packageUrl regex="true">^pkg:maven/net\.minidev/accessors\-smart@.*$</packageUrl>
        <cpe>cpe:/a:json-smart_project:json-smart</cpe>
    </suppress>

    <suppress>
        <packageUrl regex="true">^pkg:maven/net\.minidev/accessors\-smart@.*$</packageUrl>
        <cpe>cpe:/a:json-java_project:json-java</cpe>
    </suppress>

    <!-- Yet another mis-detection for the wrong language -->
    <!-- Java module is already updated to a fixed version -->
    <!-- https://github.com/jeremylong/DependencyCheck/issues/5992 -->

    <suppress>
        <packageUrl regex="true">^pkg:maven/com\.azure/azure-identity@.*$</packageUrl>
        <vulnerabilityName>CVE-2023-36415</vulnerabilityName>
    </suppress>

    <!-- This one is a vulnerability in the Azure CLI using REST commands -->
    <!-- It should not apply to Java libraries at all -->
    <suppress>
        <packageUrl regex="true">^pkg:maven/com\.azure/azure\-.*@.*$</packageUrl>
        <cve>CVE-2023-36052</cve>
    </suppress>


    <!-- ================== -->
    <!-- Special exceptions -->
    <!-- ================== -->

    <!--
    The remaining exclusions are special exceptions, added on a case-by-case basis.
    For example, vulnerabilities relating to a feature that is not being used.

    Since unaddressed vulnerabilities block merging, new vulnerabilities with no fix available are also added here.
    This does bring into question whether forcing compliance to pass before merging is the right strategy.
    On balance, I think this approach gets more attention on security issues, so they get resolved more quickly.
    But it is a trade-off, having to mark issues as false positives until the fix comes out.
    Either way, it relies on core devs keeping an eye on outstanding security issues.
    -->

    <!-- Medium level warning in legacy (deprecated) API, Google are not issuing a fix -->
    <!-- https://github.com/google/guava/issues/4011 -->
    <suppress>
        <packageUrl regex="true">^pkg:maven/com\.google\.guava/guava@.*$</packageUrl>
        <vulnerabilityName>CVE-2020-8908</vulnerabilityName>
    </suppress>


    <!-- The H2 developers maintain this CVE is not a security vulnerability and have not issued a fix -->
    <!-- The vulnerability only applies when an H2 web console service is running -->
    <!-- https://github.com/h2database/h2database/issues/3175 -->
    <suppress>
        <packageUrl regex="true">^pkg:maven/com\.h2database/h2@.*$</packageUrl>
        <vulnerabilityName>CVE-2018-14335</vulnerabilityName>
    </suppress>

    <!-- This issue in SnakeYAML has no fix available yet -->
    <!-- Developers are discussing whether this is a false positive -->
    <!-- We don't expose YAML in service APIs, it is only used for config parsing and offline runs -->
    <!-- https://bitbucket.org/snakeyaml/snakeyaml/issues/546/false-positive-mend-vulnerability-for -->

    <suppress>
        <packageUrl regex="true">^pkg:maven/org\.yaml/snakeyaml@.*$</packageUrl>
        <vulnerabilityName>CVE-2022-38752</vulnerabilityName>
        <vulnerabilityName>CVE-2022-38751</vulnerabilityName>
        <vulnerabilityName>CVE-2022-41854</vulnerabilityName>
        <vulnerabilityName>CVE-2022-1471</vulnerabilityName>
    </suppress>

    <!-- More spurious errors being reported in SonaType -->
    <!-- This is not a real vulnerability, it should be contested / closed -->
    <!-- https://nvd.nist.gov/vuln/detail/CVE-2022-45868 -->

    <suppress>
        <packageUrl regex="true">^pkg:maven/com\.h2database/h2@.*$</packageUrl>
        <cve>CVE-2022-45868</cve>
    </suppress>

    <!-- Another over-zealous report on Sonatype -->
    <!-- Jackson are considering a fix for 2.16 series, although there is no way to exploit this issue -->
    <!-- https://github.com/FasterXML/jackson-databind/issues/3972 -->
    <suppress>
        <packageUrl regex="true">^pkg:maven/com\.fasterxml\.jackson\.core/jackson\-databind@.*$</packageUrl>
        <vulnerabilityName>CVE-2023-35116</vulnerabilityName>
    </suppress>

    <!-- More NVD Noise - this is a vulnerability in Postgres itself, not the JDBC driver -->
    <!-- CVE itself is very weak, assumes attacker is on the server console and can send signals to the DB process -->

    <suppress>
        <packageUrl regex="true">^pkg:maven/org\.postgresql/postgresql@.*$</packageUrl>
        <vulnerabilityName>CVE-2020-21469</vulnerabilityName>
    </suppress>

    <!-- Netty does not do host name verification for SSL by default, it has to be enabled in code -->
    <!-- There is a discussion whether to change the default before Netty 5 -->
    <!-- https://github.com/netty/netty/issues/8537 -->

    <suppress>
        <packageUrl regex="true">^pkg:maven/io\.netty/netty\-.*@.*$</packageUrl>
        <vulnerabilityName>CVE-2023-4586</vulnerabilityName>
    </suppress>

    <!-- This is a vulnerability that has been discovered in the SSH protocol and affects many SSH implementations -->
    <!-- It only applies when certain extensions are enabled, for TRAC this applies to the execution node config -->
    <!-- Currently there is no fix available, I have raised a ticket with Apache SSHD -->
    <!-- https://github.com/apache/mina-sshd/issues/453 -->

    <suppress>
        <packageUrl regex="true">^pkg:maven/org\.apache\.sshd/sshd\-.*@.*$</packageUrl>
        <cve>CVE-2023-48795</cve>
    </suppress>

</suppressions>