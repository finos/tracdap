/**
 * A component that shows a summary of a particular version of a model stored in TRAC. This component is for viewing
 * in a PDF, there is a sister component called {@link ModelViewer} that is for viewing in a browser. These
 * two components need to be kept in sync so if a change is made to one then it should be reflected in the other.
 *
 * @module ModelViewerPdf
 * @category Component
 */

import type {CodeRepositories, Option} from "../../../types/types_general";
import {convertDateObjectToFormatCode} from "../../utils/utils_formats";
import {Link, StyleSheet, Text, View} from "@react-pdf/renderer";
import {matchModelToRepositoryConfigAndGetUrl} from "../../utils/utils_general";
import {MetadataViewerPdf} from "./MetadataViewerPdf";
import {ModelDatasetListPdf} from "./ModelDatasetListPdf";
import {ParameterTablePdf} from "./ParameterTablePdf";
import {PdfCss} from "../../../config/config_pdf_css";
import PropTypes from "prop-types";
import React from "react";
import {SchemaFieldsTablePdf} from "./SchemaFieldsTablePdf";
import {tracdap as trac} from "@finos/tracdap-web-api";
import type {UiAttributesProps} from "../../../types/types_attributes_and_parameters";

/**
 * An interface for the props of the ModelViewerPdf component.
 */
export interface Props {

    /**
     * The attribute data from the {@link setAttributesStore}, this is used to augment the presentation
     * of the attribute table with formats and the correct names.
     */
    allProcessedAttributes: Record<string, UiAttributesProps>
    /**
     * The details of the configured model repositories in the UI config, this is needed so we can add information about
     * where the model is stored.
     */
    codeRepositories: CodeRepositories
    /**
     * The metadata for the object to create a PDF report on.
     */
    tag: trac.metadata.ITag
    /**
     * The tenant option that the user is working under.
     */
    tenant: Option<string>
    /**
     * The username of the person using the application.
     */
    userName: string
    /**
     * The user ID of the person using the application.
     */
    userId: string
}

export const ModelViewerPdf = (props: Props) => {

    const {allProcessedAttributes, codeRepositories, tag, tenant, userName, userId} = props

    // Create the css styles for the exported PDF element
    const styles = StyleSheet.create(PdfCss)

    const modelCodeUrl = matchModelToRepositoryConfigAndGetUrl(codeRepositories, tag, tenant.value)

    return (
        <React.Fragment>
            <View>
                <Text style={styles.title}>Model governance report</Text>

                <Text style={styles.text}>
                    {`This document is a summary of a model held in the TRAC application and was downloaded by ${userName} (${userId}) on ${convertDateObjectToFormatCode(new Date(), "DATETIME")}. The model is stored under the ${tenant.label} (${tenant.value}) tenant `}
                    {typeof modelCodeUrl === "string" ? "and the code is available " : ", the link to the code is unavailable"}
                    {typeof modelCodeUrl === "string" && <Link style={styles.link} src={modelCodeUrl}>here</Link>}.
                </Text>
            </View>

            <View style={styles.section}>
                <Text>1. Metadata</Text>
            </View>

            <Text style={styles.text}>
                The tables below shows the metadata for the model. The header contains the model&apos;s unique ID and
                version numbers as well as the location of the code in the code repository. The attributes are tags attached to
                the object, these are either automatically generated by TRAC (e.g. who loaded it) or manually added by
                the application or by users.
            </Text>

            <MetadataViewerPdf allProcessedAttributes={allProcessedAttributes} metadata={tag}/>

            <View wrap={false}>
                <View style={styles.section}>
                    <Text>2. Parameters</Text>
                </View>

                <ParameterTablePdf params={tag.definition?.model?.parameters} objectType={"model"}/>
            </View>

            <View wrap={false}>
                <View style={styles.section}>
                    <Text>3. Input datasets</Text>
                </View>

                <ModelDatasetListPdf datasets={tag.definition?.model?.inputs} datasetType={"input"} objectType={"model"}/>
            </View>

            <View wrap={false}>
                <View style={{...styles.section, ...{marginTop: 20}}}>
                    <Text>4. Output datasets</Text>
                </View>

                <ModelDatasetListPdf datasets={tag.definition?.model?.outputs} datasetType={"output"} objectType={"model"}/>
            </View>

            {/*TODO add sign off*/}

            {tag && tag.definition?.model?.inputs &&
                <View break>
                    <View style={styles.section}>
                        <Text>Appendix I: Input dataset schemas</Text>
                    </View>

                    {Object.entries(tag.definition.model.inputs).map(([key, dataObject]) => (

                        <React.Fragment key={key}>
                            <View style={styles.subSection}>
                                <Text>{key}:</Text>
                            </View>
                            <SchemaFieldsTablePdf schema={dataObject?.schema?.table?.fields}/>
                        </React.Fragment>
                    ))}
                </View>
            }

            {tag && tag.definition?.model?.outputs &&
                <View break>
                    <View style={styles.section}>
                        <Text>Appendix {tag.definition?.model?.inputs ? "II" : "I"}: Output dataset schemas</Text>
                    </View>

                    {Object.entries(tag.definition.model.outputs).map(([key, dataObject]) => (

                        <React.Fragment key={key}>
                            <View style={styles.subSection}>
                                <Text>{key}:</Text>
                            </View>
                            <SchemaFieldsTablePdf schema={dataObject?.schema?.table?.fields}/>
                        </React.Fragment>
                    ))}
                </View>
            }
        </React.Fragment>
    )
};

ModelViewerPdf.propTypes = {

    allProcessedAttributes: PropTypes.object,
    codeRepositories: PropTypes.arrayOf(PropTypes.object).isRequired,
    tag: PropTypes.object.isRequired,
    tenant: PropTypes.object.isRequired,
    userName: PropTypes.string.isRequired,
    userId: PropTypes.string.isRequired
};