/**
 * A component that shows a summary of a particular version of a job stored in TRAC. This component is for viewing
 * in a PDF, there is a sister component called {@link JobViewer} that is for viewing in a browser. These
 * two components need to be kept in sync so if a change is made to one then it should be reflected in the other.
 */

import {convertDateObjectToFormatCode} from "../../utils/utils_formats";
import {JobViewerImportModelPdf} from "./JobViewerImportModelPdf";
import {MetadataViewerPdf} from "./MetadataViewerPdf";
import type {Option} from "../../../types/types_general";
import {PdfCss} from "../../../config/config_pdf_css";
import PropTypes from "prop-types";
import React from "react";
import {StyleSheet, Text, View} from "@react-pdf/renderer";
import {tracdap as trac} from "@finos/tracdap-web-api";
import type {UiAttributesProps} from "../../../types/types_attributes_and_parameters";

/**
 * An interface for the props of the JobViewerPdf component.
 */
export interface Props {

    /**
     * The attribute data from the {@link setAttributesStore}, this is used to augment the presentation
     * of the attribute table with formats and the correct names.
     */
    allProcessedAttributes: Record<string, UiAttributesProps>
    /**
     * The SVG image of the flow (if the object being reported on is a flow).
     */
    svg?: null | React.ReactElement
    /**
     * The metadata for the object to create a PDF report on.
     */
    tag: trac.metadata.ITag
    /**
     * The tenant option that the user is working under.
     */
    tenant: Option<string>
    /**
     * The username of the person using the application.
     */
    userName: string
    /**
     * The user ID of the person using the application.
     */
    userId: string
}

// TODO finish off the run flow, run model and import model variants
export const JobViewerPdf = (props: Props) => {

    const {allProcessedAttributes, tag, tenant, userName, userId, svg} = props

    // Create the css styles for the exported PDF element
    const styles = StyleSheet.create(PdfCss)

    return (
        <React.Fragment>
            <View>
                <Text style={styles.title}>Job governance report</Text>

                <Text style={styles.text}>
                    {`This document is a summary of a job held in the TRAC application and was downloaded by ${userName} (${userId}) on ${convertDateObjectToFormatCode(new Date(), "DATETIME")}. The job is stored under the ${tenant.label} (${tenant.value}) tenant.`}
                </Text>
            </View>

            <View style={styles.section}>
                <Text>1. Metadata</Text>
            </View>

            <Text style={styles.text}>
                The table below shows the metadata for the job. The header contains the dataset&apos;s unique ID and
                version numbers. The attributes are tags attached to the object, these are either automatically
                generated by TRAC (e.g. who loaded it) or manually added by users.
            </Text>

            <MetadataViewerPdf allProcessedAttributes={allProcessedAttributes}
                               metadata={tag}
            />

            {/*{tag.definition?.job?.runFlow &&*/}
            {/*    //<JobViewerRunFlow job={tag}/>*/}
            {/*}*/}
            {/*{tag.definition?.job?.runModel &&*/}
            {/*    //<JobViewerRunModel job={tag}/>*/}
            {/*}*/}
            {tag.definition?.job?.importModel &&
                <JobViewerImportModelPdf allProcessedAttributes={allProcessedAttributes}
                                         job={tag}/>
            }

            {/*<View break>*/}
            {/*    <View style={styles.section}>*/}
            {/*        <Text>2. Visualisation</Text>*/}
            {/*    </View>*/}
            {/*    {svg}*/}
            {/*</View>*/}

            {/*<View wrap={false}>*/}
            {/*    <View style={styles.section}>*/}
            {/*        <Text>3. Parameters</Text>*/}
            {/*    </View>*/}

            {/*    <ParameterTablePdf params={metadata.params} objectType={"flow"}/>*/}
            {/*</View>*/}

            {/*<View wrap={false}>*/}
            {/*    <View style={styles.section}>*/}
            {/*        <Text>4. Input datasets</Text>*/}
            {/*    </View>*/}

            {/*    <ModelDatasetListPdf datasets={metadata.inputs} datasetType={"input"} objectType={"flow"}/>*/}
            {/*</View>*/}

            {/*<View wrap={false}>*/}
            {/*    <View style={{...styles.section, ...{marginTop: 20}}}>*/}
            {/*        <Text>5. Output datasets</Text>*/}
            {/*    </View>*/}

            {/*    <ModelDatasetListPdf datasets={metadata.outputs} datasetType={"output"} objectType={"flow"}/>*/}
            {/*</View>*/}

            {/*<View wrap={false}>*/}
            {/*    <View style={{...styles.section, ...{marginTop: 20}}}>*/}
            {/*        <Text>6. Specification by model</Text>*/}
            {/*    </View>*/}

            {/*    <Text style={styles.text}>*/}
            {/*        This section contains a breakdown of the specification of each model in the flow.*/}
            {/*    </Text>*/}
            {/*</View>*/}

            {/*{getNodeNamesFromFlow(metadata, "model").map((modelId, i) => {*/}

            {/*    return (*/}
            {/*        <React.Fragment key={modelId}>*/}
            {/*            <View wrap={false}>*/}
            {/*                <View style={styles.subSection}>*/}
            {/*                    <Text>6.{i}. Model {modelId}</Text>*/}
            {/*                </View>*/}

            {/*                <View style={styles.subSubSection}>*/}
            {/*                    <Text>Parameters</Text>*/}
            {/*                </View>*/}

            {/*                <ParameterTablePdf noText={true} params={getModelParamsFromFlow(metadata, modelId)}*/}
            {/*                                  objectType={"model"}/>*/}
            {/*            </View>*/}

            {/*            <View wrap={false}>*/}
            {/*                <View style={styles.subSubSection}>*/}
            {/*                    <Text>Input datasets</Text>*/}
            {/*                </View>*/}

            {/*                <ModelDatasetListPdf noText={true}*/}
            {/*                             datasets={getModelInputsFromFlow(metadata, modelId, getRenamedDatasets(metadata))}*/}
            {/*                             datasetType={"input"} objectType={"model"}/>*/}
            {/*            </View>*/}

            {/*            <View wrap={false}>*/}
            {/*                <View style={styles.subSubSection}>*/}
            {/*                    <Text>Output datasets</Text>*/}
            {/*                </View>*/}

            {/*                <ModelDatasetListPdf noText={true} datasets={getModelOutputsFromFlow(metadata, modelId)}*/}
            {/*                             datasetType={"output"}*/}
            {/*                             objectType={"model"}/>*/}
            {/*            </View>*/}
            {/*        </React.Fragment>*/}
            {/*    )*/}

            {/*})}*/}

            {/*/!*TODO add signoff*!/*/}

            {/*<View break>*/}
            {/*    <View style={styles.section}>*/}
            {/*        <Text>Appendix I: Input dataset schemas</Text>*/}
            {/*    </View>*/}

            {/*    {Object.keys(metadata.inputs).map(key => (*/}

            {/*        <React.Fragment key={key}>*/}
            {/*            <View style={styles.subSection}>*/}
            {/*                <Text>{key}:</Text>*/}
            {/*            </View>*/}
            {/*            <SchemaFieldsTablePdf schema={metadata.inputs[key].schema.fields}/>*/}
            {/*        </React.Fragment>*/}
            {/*    ))}*/}
            {/*</View>*/}

            {/*<View break>*/}
            {/*    <View style={styles.section}>*/}
            {/*        <Text>Appendix II: Output dataset schemas</Text>*/}
            {/*    </View>*/}

            {/*    {Object.keys(metadata.outputs).map(key => (*/}

            {/*        <React.Fragment key={key}>*/}
            {/*            <View style={styles.subSection}>*/}
            {/*                <Text>{key}:</Text>*/}
            {/*            </View>*/}
            {/*            <SchemaFieldsTablePdf schema={metadata.outputs[key].fields}/>*/}
            {/*        </React.Fragment>*/}
            {/*    ))}*/}
            {/*</View>*/}
        </React.Fragment>
    )
};

JobViewerPdf.propTypes = {

    allProcessedAttributes: PropTypes.object,
    svg: PropTypes.object,
    tag: PropTypes.object.isRequired,
    tenant: PropTypes.object.isRequired,
    userName: PropTypes.string.isRequired,
    userId: PropTypes.string.isRequired,
};