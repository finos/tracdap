/**
 * A component that shows a summary of a particular version of a dataset stored in TRAC. This component is for viewing
 * in a PDF, there is a sister component called {@link DataViewer} that is for viewing in a browser. These two
 * components need to be kept in sync so if a change is made to one then it should be reflected in the other.
 *
 * @module DataViewerPdf
 * @category Component
 */

import {convertDateObjectToFormatCode} from "../../utils/utils_formats";
import {MetadataViewerPdf} from "./MetadataViewerPdf";
import type {Option} from "../../../types/types_general";
import {PdfCss} from "../../../config/config_pdf_css";
import PropTypes from "prop-types";
import React from "react";
import {SchemaFieldsTablePdf} from "./SchemaFieldsTablePdf";
import {StyleSheet, Text, View} from "@react-pdf/renderer";
import {tracdap as trac} from "@finos/tracdap-web-api";
import type {UiAttributesProps} from "../../../types/types_attributes_and_parameters";

/**
 * An interface for the props of the DataViewerPdf component.
 */
export interface Props {

    /**
     * The attribute data from the {@link setAttributesStore}, this is used to augment the presentation
     * of the attribute table with formats and the correct names.
     */
    allProcessedAttributes: Record<string, UiAttributesProps>
    /**
     * The metadata for the object to create a PDF report on.
     */
    tag: trac.metadata.ITag
    /**
     * The tenant option that the user is working under.
     */
    tenant: Option<string>
    /**
     * The username of the person using the application.
     */
    userName: string
    /**
     * The user ID of the person using the application.
     */
    userId: string
}

export const DataViewerPdf = (props: Props) => {

    const {allProcessedAttributes, tag, tenant, userName, userId} = props

    // Create the css styles for the exported PDF element
    const styles = StyleSheet.create(PdfCss)

    return (
        <React.Fragment>
            <View>
                <Text style={styles.title}>Dataset governance report</Text>

                <Text style={styles.text}>
                    {`This document is a summary of a dataset held in the TRAC application and was downloaded by ${userName} (${userId}) on ${convertDateObjectToFormatCode(new Date(), "DATETIME")}. The dataset is stored under the ${tenant.label} (${tenant.value}) tenant.`}
                </Text>
            </View>

            <View style={styles.section}>
                <Text>1. Metadata</Text>
            </View>

            <Text style={styles.text}>
                The table below shows the metadata for the dataset. The header contains the dataset&apos;s unique ID and
                version numbers. The attributes are tags attached to the object, these are either automatically
                generated by TRAC (e.g. who loaded it) or manually added by users.
            </Text>

            <MetadataViewerPdf allProcessedAttributes={allProcessedAttributes}
                               metadata={tag}
            />

            <View wrap={false}>
                <View style={styles.section}>
                    <Text>2. Schema</Text>
                </View>
                <SchemaFieldsTablePdf schema={tag?.definition?.data?.schema?.table?.fields}/>
                {/* TODO Add deltas and parts viewer*/}
            </View>

        </React.Fragment>
    )
};

DataViewerPdf.propTypes = {

    allProcessedAttributes: PropTypes.object,
    tag: PropTypes.object.isRequired,
    tenant: PropTypes.object.isRequired,
    userName: PropTypes.string.isRequired,
    userId: PropTypes.string.isRequired
};