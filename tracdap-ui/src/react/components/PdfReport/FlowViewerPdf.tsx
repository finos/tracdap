/**
 * A component that shows a summary of a particular version of a flow stored in TRAC. This component is for viewing
 * in a PDF, there is a sister component called {@link FlowViewer} that is for viewing in a browser. These two
 * components need to be kept in sync so if a change is made to one then it should be reflected in the other.
 *
 * @module FlowViewerPdf
 * @category Component
 */

import {convertDateObjectToFormatCode} from "../../utils/utils_formats";
import {getModelInputsFromFlow, getModelOutputsFromFlow, getNodeNamesFromFlow, getRenamedDatasets, getSearchQueryFromFlowNode} from "../../utils/utils_flows";
import {MetadataViewerPdf} from "./MetadataViewerPdf";
import {ModelDatasetListPdf} from "./ModelDatasetListPdf";
import type {Option} from "../../../types/types_general";
import {PdfCss} from "../../../config/config_pdf_css";
import PropTypes from "prop-types";
import React from "react";
import {SearchQueryListPdf} from "./SearchQueryListPdf";
import {StyleSheet, Text, View} from "@react-pdf/renderer";
import {tracdap as trac} from "@finos/tracdap-web-api";
import type {UiAttributesProps} from "../../../types/types_attributes_and_parameters";

/**
 * An interface for the props of the FlowViewerPdf component.
 */
export interface Props {

    /**
     * The attribute data from the {@link setAttributesStore}, this is used to augment the presentation
     * of the attribute table with formats and the correct names.
     */
    allProcessedAttributes: Record<string, UiAttributesProps>
    /**
     * The SVG image of the flow (if the object being reported on is a flow).
     */
    svg?: null | React.ReactElement
    /**
     * The SVG image of the key for the flow (if the object being reported on is a flow).
     */
    svgKey?: null | React.ReactElement
    /**
     * The metadata for the object to create a PDF report on.
     */
    tag: trac.metadata.ITag
    /**
     * The tenant option that the user is working under.
     */
    tenant: Option<string>
    /**
     * The username of the person using the application.
     */
    userName: string
    /**
     * The user ID of the person using the application.
     */
    userId: string
}

export const FlowViewerPdf = (props: Props) => {

    const {allProcessedAttributes, tag, tenant, userName, userId, svg, svgKey} = props

    // Create the css styles for the exported PDF element
    const styles = StyleSheet.create(PdfCss)

    const renamedDatasets = getRenamedDatasets(tag.definition?.flow)

    return (
        <React.Fragment>

            {tag.definition?.flow &&
                <React.Fragment>
                    <View>
                        <Text style={styles.title}>Flow governance report</Text>

                        <Text style={styles.text}>
                            {`This document is a summary of a flow held in the TRAC application and was downloaded by ${userName} (${userId}) on ${convertDateObjectToFormatCode(new Date(), "DATETIME")}. The flow is stored under the ${tenant.label} (${tenant.value}) tenant.`}
                        </Text>
                    </View>

                    <View style={styles.section}>
                        <Text>1. Metadata</Text>
                    </View>

                    <Text style={styles.text}>
                        The table below shows the metadata for the flow. The header contains the dataset&apos;s unique ID and
                        version numbers. The attributes are tags attached to the object, these are either automatically
                        generated by TRAC (e.g. who loaded it) or manually added by users.
                    </Text>

                    <MetadataViewerPdf allProcessedAttributes={allProcessedAttributes}
                                       metadata={tag}
                    />

                    <View break>
                        <View style={styles.section}>
                            <Text>2. Visualisation</Text>
                        </View>
                        {svg}
                        {svgKey}
                    </View>

                    <View break>
                        <View wrap={false}>
                            <View style={{...styles.section, ...{marginTop: 20}}}>
                                <Text>3. Specification by model</Text>
                            </View>

                            <Text style={styles.text}>
                                This section contains a breakdown of the specification of each model in the flow.
                            </Text>
                        </View>

                        {getNodeNamesFromFlow(tag, trac.FlowNodeType.MODEL_NODE).map((modelId, i) => {

                            const modelOutputDatasets = getModelOutputsFromFlow(tag.definition?.flow || {}, modelId)
                            let modelOutputDatasetsSaved: Record<string, trac.metadata.IFlowNode & { type: "output" | "intermediate" }> = {}
                            let modelOutputDatasetsIntermediate: Record<string, trac.metadata.IFlowNode & { type: "output" | "intermediate" }> = {}

                            // Filter the outputs into the two categories
                            Object.entries(modelOutputDatasets).forEach(([key, datasetObject]) => {

                                if (datasetObject.type === "output") {
                                    modelOutputDatasetsSaved[key] = datasetObject
                                } else if (datasetObject.type === "intermediate") {
                                    modelOutputDatasetsIntermediate[key] = datasetObject
                                }
                            })

                            return (
                                <React.Fragment key={modelId}>

                                    <View wrap={false}>
                                        <View style={styles.subSection}>
                                            <Text>6.{i + 1}. Model {modelId}</Text>
                                        </View>

                                        <View style={styles.subSubSection}>
                                            <Text>Search query</Text>
                                        </View>

                                        <Text style={styles.text}>
                                            The search query is how TRAC finds the set of available options for
                                            this model in the flow
                                        </Text>

                                        <SearchQueryListPdf
                                            queries={getSearchQueryFromFlowNode(tag.definition?.flow || {}, modelId)}
                                        />
                                    </View>

                                    <View wrap={false}>
                                        <View style={styles.subSubSection}>
                                            <Text>Input datasets</Text>
                                        </View>

                                        <ModelDatasetListPdf datasets={getModelInputsFromFlow(tag.definition?.flow || {}, modelId, renamedDatasets)}
                                                             datasetType={"input"}
                                                             noText={true}
                                                             objectType={"model"}
                                        />
                                    </View>

                                    {Object.keys(modelOutputDatasetsIntermediate).length > 0 &&
                                        <View wrap={false}>
                                            <View style={styles.subSubSection}>
                                                <Text>Intermediate datasets</Text>
                                            </View>

                                            <ModelDatasetListPdf datasets={modelOutputDatasetsIntermediate}
                                                                 datasetType={"intermediate"}
                                                                 noText={true}
                                                                 objectType={"model"}
                                            />
                                        </View>
                                    }

                                    <View wrap={false}>
                                        <View style={styles.subSubSection}>
                                            <Text>Output datasets</Text>
                                        </View>

                                        <ModelDatasetListPdf datasets={modelOutputDatasetsSaved}
                                                             datasetType={"output"}
                                                             noText={true}
                                                             objectType={"model"}
                                        />
                                    </View>

                                </React.Fragment>
                            )

                        })}
                    </View>

                    {/*/!*TODO add signoff*!/*/}
                </React.Fragment>
            }
        </React.Fragment>
    )
};

FlowViewerPdf.propTypes = {

    allProcessedAttributes: PropTypes.object,
    svg: PropTypes.object,
    tag: PropTypes.object.isRequired,
    tenant: PropTypes.object.isRequired,
    userName: PropTypes.string.isRequired,
    userId: PropTypes.string.isRequired,
};