/*
 * Copyright 2020 Accenture Global Solutions Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";
package tracdap.api.internal;

option java_package = "org.finos.tracdap.api.internal";
option java_multiple_files = true;

import "tracdap/metadata/object_id.proto";
import "tracdap/metadata/tag.proto";
import "tracdap/api/metadata.proto";

import "google/api/annotations.proto";

/**
 * Trusted API reading, writing and searching for objects in the TRAC metadata store.
 *
 * This API is only available to other components of the TRAC platform, it is
 * not exposed to clients via the platform gateway.
 *
 * Most of the calls in this interface are identical to their public equivalents.
 * Extra calls are available for pre-allocating objects, a facility which is not
 * available to clients of the platform. Restrictions on the creation of certain
 * object types and manipulation of controlled tag attributes are lifted. Methods
 * for performing HTTP GET requests of RESTFUL resources are not duplicated.
 *
 * @see TracMetadataApi
 */
service TrustedMetadataApi {

  /**
   * Create a new object in the TRAC metadata store.
   *
   * This call behaves identically to the equivalent public API call, without the
   * restriction on which types of object can be saved.
   *
   * @see TracMetadataApi.createObject()
   */
  rpc createObject (MetadataWriteRequest) returns (metadata.TagHeader) {
    option (google.api.http) = {
      post: "/{tenant}/trusted/create-object"
      body: "*"
    };
  }

  /**
   * Update an existing object in the TRAC metadata store.
   *
   * This call behaves identically to the equivalent public API call, however it
   * can be used with any type of object that supports versioning (currently DATA
   * and CUSTOM).
   *
   * @see TracMetadataApi.updateObject()
   */
  rpc updateObject (MetadataWriteRequest) returns (metadata.TagHeader) {
    option (google.api.http) = {
      post: "/{tenant}/trusted/update-object"
      body: "*"
    };
  }

  /**
   * Update the tag for an existing object in the TRAC metadata store.
   *
   * This call behaves identically to the equivalent public API call.
   *
   * @see TracMetadataApi.updateTag()
   */
  rpc updateTag (MetadataWriteRequest) returns (metadata.TagHeader) {
    option (google.api.http) = {
      post: "/{tenant}/trusted/update-tag"
      body: "*"
    };
  }

  /**
   * Preallocate an object ID for an object that will be created later.
   *
   * This call is for use by TRAC components that need to reserve an ID before
   * it is used, particularly if the object ID must be included in the definition
   * of an object that has not been created yet. When creating an ID the tenant
   * and object type must be specified, the object that is eventually saved must
   * match these two conditions. Orphan IDs are expected - if a component request
   * an ID and encounters an error before that ID is used, the orphan ID is just
   * ignored.
   */
  rpc preallocateId (MetadataWriteRequest) returns (metadata.TagHeader) {
    option (google.api.http) = {
      post: "/{tenant}/trusted/preallocate"
      body: "*"
    };
  }

  /**
   * Create an object using an ID that was previously preallocated.
   *
   * This call behaves essentially the same as createObject(), with all the
   * same validation. The only difference is that the new definition must be
   * supplied with an object header, including the object ID returned from a
   * prior call to preallocateId().
   *
   * Error conditions include all the error conditions for createObject().
   * Using a preallocated ID twice, attempting to save to an unknown ID or the
   * ID of another object that already exists are also errors.
   */
  rpc createPreallocatedObject (MetadataWriteRequest) returns (metadata.TagHeader) {
    option (google.api.http) = {
      post: "/{tenant}/trusted/create-preallocated"
      body: "*"
    };
  }

  /**
   * Perform a batch of write operations on the TRAC metadata store.
   *
   * This call behaves similarly to the equivalent public API call. However,
   * the createObject, updateObject and updateTag request types take their
   * semantics from the trusted API instead of the public one. It is also
   * possible to include preallocateId and createPreallocatedObject in the
   * batch request.
   *
   * @see TracMetadataApi.writeBatch()
   */
  rpc writeBatch (MetadataWriteBatchRequest) returns (MetadataWriteBatchResponse) {
    option (google.api.http) = {
      post: "/{tenant}/trusted/write-batch"
      body: "*"
    };
  }

  /**
   * Read a single object from the TRAC metadata store using a tag selector.
   *
   * This call behaves identically to the equivalent public API call.
   *
   * @see TracMetadataApi.readObject()
   */
  rpc readObject(MetadataReadRequest) returns (metadata.Tag) {
    option (google.api.http) = {
      post: "/{tenant}/trusted/read-object"
      body: "selector"
    };
  }

  /**
   * Read multiple objects from the TRAC metadata store using tag selectors.
   *
   * This call behaves identically to the equivalent public API call.
   *
   * @see TracMetadataApi.readBatch()
   */
  rpc readBatch(MetadataBatchRequest) returns (MetadataBatchResponse) {
    option (google.api.http) = {
      post: "/{tenant}/trusted/read-batch"
      body: "selector"
    };
  }

  /**
   * Perform a search against the TRAC metadata store.
   *
   * This call behaves identically to the equivalent public API call.
   *
   * @see TracMetadataApi.search()
   */
  rpc search(MetadataSearchRequest) returns (MetadataSearchResponse) {
    option (google.api.http) = {
      post: "/{tenant}/trusted/search"
      body: "searchParams"
    };
  }
};
