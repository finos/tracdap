/*
 * Licensed to the Fintech Open Source Foundation (FINOS) under one or
 * more contributor license agreements. See the NOTICE file distributed
 * with this work for additional information regarding copyright ownership.
 * FINOS licenses this file to you under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with the
 * License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";
package tracdap.api;

option java_package = "org.finos.tracdap.api";
option java_outer_classname = "AdminServiceProto";
option java_multiple_files = true;

import "tracdap/metadata/common.proto";
import "tracdap/metadata/config.proto";
import "tracdap/metadata/resource.proto";
import "tracdap/metadata/object_id.proto";
import "tracdap/metadata/object.proto";
import "tracdap/metadata/type.proto";

// Config request / response objects used by multiple APIs
import "tracdap/api/config.proto";

import "google/api/annotations.proto";


/**
 * Public API for performing admin functions, such as managing tenants and configuration.
 */
service TracAdminApi {

    /// Create a new config entry and store the associated object definition
    rpc createConfigObject(ConfigWriteRequest) returns (ConfigWriteResponse) {
        option (google.api.http) = {
            post: "/{tenant}/create-config-object"
            body: "*"
        };
    }

    /// Update an existing config entry and store the associated object definition
    rpc updateConfigObject(ConfigWriteRequest) returns (ConfigWriteResponse) {
        option (google.api.http) = {
            post: "/{tenant}/update-config-object"
            body: "*"
        };
    }

    /// Delete an existing config entry
    rpc deleteConfigObject(ConfigWriteRequest) returns (ConfigWriteResponse) {
        option (google.api.http) = {
            post: "/{tenant}/delete-config-object"
            body: "*"
        };
    }

    /// Read an individual config entry
    rpc readConfigObject(ConfigReadRequest) returns (ConfigReadResponse) {
        option (google.api.http) = {
            post: "/{tenant}/read-config-object"
            body: "*"
        };
    }

    /// Read a batch of config entries
    rpc readConfigBatch(ConfigReadBatchRequest) returns (ConfigReadBatchResponse) {
        option (google.api.http) = {
            post: "/{tenant}/read-config-batch"
            body: "*"
        };
    }

    /// List available config entries, with optional filter criteria
    rpc listConfigEntries(ConfigListRequest) returns (ConfigListResponse) {
        option (google.api.http) = {
            post: "/{tenant}/list-config-entries"
            body: "*"
        };
    }
}
