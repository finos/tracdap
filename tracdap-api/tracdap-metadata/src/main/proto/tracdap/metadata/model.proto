/*
 * Copyright 2020 Accenture Global Solutions Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = 'proto3';
package tracdap.metadata;

option java_package = "org.finos.tracdap.metadata";
option java_multiple_files = true;

import "tracdap/metadata/type.proto";
import "tracdap/metadata/data.proto";


/**
 * Describes an individual parameter of a model
 */
message ModelParameter {

    TypeDescriptor paramType = 1;

    string label = 2;

    optional Value defaultValue = 3;
}


/**
 * Describes the data schema of a model input
 *
 * In many cases models define the entire schemas of their inputs, in which case the input
 * schema is just a wrapper around a schema definition. This is what is supported now.
 *
 * Other approaches are possible. Models can define dynamic inputs, in which case the input
 * schema is provided at runtime and can be interrogated by the model code. Models may also
 * define inputs with some required fields and a dynamic portion. For non-tabular inputs,
 * other options may be required. These capabilities may be added in future releases.
 */
message ModelInputSchema {

    SchemaDefinition schema = 1;

    optional string label = 2;
}

/**
 * Describes the data schema of a model output
 *
 * In many cases models define the entire schemas of their outputs, in which case the output
 * schema is just a wrapper around a schema definition. This is what is supported now.
 *
 * Other approaches are possible. Models can define dynamic outputs, in which case the model
 * decides at runtime what the output schema will be. Pass-through schemas (output X has the
 same schema as dynamic input Y) and pass-through-extend schemas (output X has the schema of
 dynamic input Y, plus one or more new columns) can also be useful. These capabilities may be
 * added in future releases.
 */
message ModelOutputSchema {

    SchemaDefinition schema = 1;

    optional string label = 2;
}


/**
 * Define a model for execution on the TRAC platform
 */
message ModelDefinition {

    string language = 1;
    string repository = 2;

    optional string packageGroup = 10;
    string package = 11;
    string version = 6;

    string entryPoint = 5;

    optional string path = 3;

    map<string, ModelParameter> parameters = 7;
    map<string, ModelInputSchema> inputs = 8;
    map<string, ModelOutputSchema> outputs = 9;

    /**
     * Static attributes defined in model code
     */
    map<string, Value> staticAttributes = 12;
}
