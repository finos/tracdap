/*
 * Licensed to the Fintech Open Source Foundation (FINOS) under one or
 * more contributor license agreements. See the NOTICE file distributed
 * with this work for additional information regarding copyright ownership.
 * FINOS licenses this file to you under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with the
 * License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = 'proto3';
package tracdap.metadata;

option java_package = "org.finos.tracdap.metadata";
option java_multiple_files = true;

import "tracdap/metadata/object_id.proto";


/**
 * Enumeration of infrastructure resources that can be added to a tenant
 */
enum ResourceType {

  RESOURCE_TYPE_NOT_SET = 0;

  /// Storage location for data held internally by the TRAC platform
  INTERNAL_STORAGE = 1;

  // Storage location for upstream / downstream integration points
  EXTERNAL_STORAGE = 2;

  /// Model repository, which can be a source or binary repository
  MODEL_REPOSITORY = 3;
}

/**
 * Definition of a platform resource
 */
message ResourceDefinition {

  /// The type of this resource
  ResourceType resourceType = 1;

  /// The protocol used to communicate with this resource (usually corresponds to a TRAC plugin)
  string protocol = 2;

  /// Optional sub-protocol, to further distinguish the behavior of resources within a protocol
  optional string subProtocol = 3;

  /// Configuration properties for this resource, made visible to client applications
  map<string, string> publicProperties = 4;

  /// Configuration properties for this resource, not visible to client applications
  map<string, string> properties = 5;

  /**
   * Configuration properties that are stored as secrets using TRAC's secret handling mechanism
   *
   * Only the secret alias is stored in metadata, handling of secret storage is delegated to the
   * configured secrets plugin. Secret values may be sent by clients when resource definitions are
   * created / updated, in which case they will be written to the configured secret store and
   * metadata values will be replaced with an alias.
   */
  map<string, string> secrets = 6;
}
