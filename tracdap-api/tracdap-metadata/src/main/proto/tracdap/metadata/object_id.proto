/*
 * Licensed to the Fintech Open Source Foundation (FINOS) under one or
 * more contributor license agreements. See the NOTICE file distributed
 * with this work for additional information regarding copyright ownership.
 * FINOS licenses this file to you under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with the
 * License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";
package tracdap.metadata;

option java_package = "org.finos.tracdap.metadata";
option java_multiple_files = true;

import "tracdap/metadata/type.proto";


/**
 * Enumeration of TRAC's core object types.
 *
 * @see ObjectDefinition
 */
enum ObjectType {
  OBJECT_TYPE_NOT_SET = 0;
  DATA = 1;
  MODEL = 2;
  FLOW = 3;
  JOB = 4;
  FILE = 5;
  CUSTOM = 6;
  STORAGE = 7;
  SCHEMA = 8;
}


/**
 * A tag header describes the identity and version of an object.
 *
 * @see Tag
 * @see ObjectDefinition
 */
message TagHeader {

  /**
   * Object type of the object this tag is associated with.
   *
   * @see ObjectType
   */
  ObjectType objectType = 1;

  /**
   * Object ID of the object this tag is associated with.
   *
   * Object IDs are UUIDs (RFC4122, https://www.ietf.org/rfc/rfc4122.txt)
   */
  string objectId = 2;

  /**
   * Version of the object this tag is associated with.
   */
  int32 objectVersion = 3;

  /**
   * Timestamp for when this version of the object was created.
   */
  DatetimeValue objectTimestamp = 4;

  /**
   * Version of this tag.
   */
  int32 tagVersion = 5;

  /**
   * Timestamp for when this version of the tag was created.
   */
  DatetimeValue tagTimestamp = 6;

  /**
   * isLatest flag for the object the tag is associated with.
   */
  bool isLatestObject = 7;

  /**
   * isLatest flag for the tag.
   */
  bool isLatestTag = 8;
}


/**
 * A tag selector describes the selection of a unique object at a point in time.
 *
 * A tag selector refers to a single object ID and provides criteria for
 * selecting the object version and tag version. The available selection
 * criteria are:
 *
 *  - Select an explicit version number
 *  - Select the latest available version
 *  - Select the version that was live at specific point in time
 *
 * A selector for an explicit version number will always match that exact
 * version number. These "fixed" types of selector can be used to refer to
 * elements of a repeatable job, because the versions they refer to will never
 * change.
 *
 * A selector for the latest version will select different versions over time,
 * as they become available. These "variable" types of selector can be used by
 * client applications that want to query the latest state of an object. If a
 * job is set up using variable selectors, TRAC will convert them to fixed
 * selectors for the particular versions that were selected before saving the
 * job definition.
 *
 * Criteria for object versions and tag versions can be "mixed and matched", so
 * e.g. latestObject = true with tagVersion = 1 is allowed.
 *
 * @see Tag
 * @see TagHeader
 */
message TagSelector {

  /**
   * Object type of the tag being selected.
   *
   * @see ObjectType
   */
  ObjectType objectType = 1;

  /**
   * Object ID of the tag being selected.
   *
   * Object IDs are UUIDs (RFC4122, https://www.ietf.org/rfc/rfc4122.txt)
   */
  string objectId = 2;

  oneof objectCriteria {

    /**
     * Select the latest version of the object (the version that is live now).
     *
     * If this flag is specified, it must be set to true.
     */
    bool latestObject = 3;

    /**
     * Select an explicit version of the object.
     */
    int32 objectVersion = 4;

    /**
     * Select the version of the object that was live as of a particular point
     * in time. Represented using ISO 8601.
     */
    DatetimeValue objectAsOf = 5;
  }

  oneof tagCriteria {

    /**
     * Select the latest version of the tag (the version that is live now).
     *
     * If this flag is specified, it must be set to true.
     */
    bool latestTag = 6;

    /**
     * Select an explicit version of the tag.
     */
    int32 tagVersion = 7;

    /**
     * Select the version of the tag that was live as of a particular point
     * in time. Represented using ISO 8601.
     */
    DatetimeValue tagAsOf = 8;
  }
}
