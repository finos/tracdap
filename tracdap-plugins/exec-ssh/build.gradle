/*
 * Copyright 2022 Accenture Global Solutions Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id "java-library"
    id 'java-library-distribution'
    id "com.google.protobuf"
}

apply from: "${rootProject.projectDir.path}/gradle/base-java.gradle"


description = "Executor plugin for remote execution over SSH"

// Put plugins into a separate package group
group = "org.finos.tracdap.plugins"

dependencies {

    api project(':tracdap-lib-common')
    api project(':tracdap-lib-orch')

    // Dependencies for Apache SSHD
    implementation (group: "org.apache.sshd", name: "sshd-common", version: "${apache_sshd_version}")
    implementation group: "org.apache.sshd", name: "sshd-core", version: "${apache_sshd_version}"
    implementation group: "org.apache.sshd", name: "sshd-scp", version: "${apache_sshd_version}"
    implementation group: "org.apache.sshd", name: "sshd-netty", version: "${apache_sshd_version}"

    // Force Netty version to match the core framework
    implementation group: 'io.netty', name: 'netty-common', version: "$netty_version"
    implementation group: 'io.netty', name: 'netty-transport', version: "$netty_version"
    implementation group: 'io.netty', name: 'netty-handler', version: "$netty_version"

    // Force version of SLF4J to match other components
    implementation group: 'org.slf4j', name: 'slf4j-api', version: "${slf4j_version}"
    implementation group: 'org.slf4j', name: 'jcl-over-slf4j', version: "${slf4j_version}"

    // Pull in the executor test suite for testing
    testImplementation project(path: ':tracdap-lib-orch', configuration: 'testSuite')
}

protobuf {

    protoc {
        artifact = "com.google.protobuf:protoc:$proto_version"
    }

    generateProtoTasks.generatedFilesBaseDir = "${project.buildDir}/generated-sources"

    generateProtoTasks {
        //noinspection GroovyAssignabilityCheck
        all().each { task -> task.builtins { java {} } }
    }
}

sourceSets {
    main {
        java {
            // Include generated code from protoc
            // Including the proto src dir lets autocomplete work in the IDE
            srcDirs "${project.buildDir}/generated-sources/main/java"
            srcDirs "${projectDir}/src/main/proto"
        }
    }
}

// Use a different build dir (don't include plugins in the main release package)
project.buildDir = rootProject.buildDir.path + '/plugins/' + project.name
