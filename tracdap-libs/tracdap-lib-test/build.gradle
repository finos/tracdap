/*
 * Licensed to the Fintech Open Source Foundation (FINOS) under one or
 * more contributor license agreements. See the NOTICE file distributed
 * with this work for additional information regarding copyright ownership.
 * FINOS licenses this file to you under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with the
 * License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id "java-library"
}

apply from: "${rootProject.projectDir.path}/gradle/base-java.gradle"


description = "TRAC D.A.P. test library, pulls in everything needed to run tests across the TRAC platform services"

dependencies {

    api project(":tracdap-api-metadata")
    api project(":tracdap-api-config")
    api project(":tracdap-api-services")

    api project(':tracdap-lib-common')
    api project(':tracdap-lib-meta')
    api project(':tracdap-lib-data')
    api project(':tracdap-lib-db')

    // Include the proto extension test files
    api project(':tracdap-lib-test-proto')

    // Give tests access to the deploy tools to set up services for integration
    api project(':deploy-metadb')
    api project(':secret-tool')

    // Use Jupiter API to define test extensions
    api group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: "$junit_version"

    // Embedded test services run on gRPC with Netty
    implementation group: 'io.grpc', name: 'grpc-netty', version: "$grpc_version"

    // Apache Arrow data framework
    implementation group: 'org.apache.arrow', name: 'arrow-vector', version: "$arrow_version"
    implementation group: 'org.apache.arrow', name: 'arrow-memory-netty', version: "$arrow_version"

    // Jackson uses runtime class resolution
    // Make sure classes needed for config parsing are always on the runtime classpath for tests
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: "$jackson_version"
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: "$jackson_databind_version"
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: "$jackson_databind_version"
    implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: "$jackson_version"
    implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-csv', version: "$jackson_version"

    // Use Flyway to deploy schemas in test cases
    implementation group: 'org.flywaydb', name: 'flyway-core', version: "$flyway_version"
}


// Compiling dependent targets does not require processResources to be executed by default
// E.g. running tests from the IDE will not trigger processResources - this can cause confusion!
// This dependency ensures resources are always processed, even for partial builds

compileJava.dependsOn(processResources)

// Bring DDL files into test JAR as resources
processResources {

    from "${project(':tracdap-lib-meta').projectDir.path}/src/schema"
}
