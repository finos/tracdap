/*
 * Licensed to the Fintech Open Source Foundation (FINOS) under one or
 * more contributor license agreements. See the NOTICE file distributed
 * with this work for additional information regarding copyright ownership.
 * FINOS licenses this file to you under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with the
 * License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id "java-library"
}

apply from: "${rootProject.projectDir.path}/gradle/base-java.gradle"


description = "TRAC D.A.P. data library, interfaces and core functionality for working with primary data"

dependencies {

    api project(':tracdap-api-config')
    api project(':tracdap-lib-common')

    // Data framework API is in terms of Apache Arrow
    api (group: 'org.apache.arrow', name: 'arrow-vector', version: "$arrow_version") {

        // For explicit versions of Jackson - needed to pass compliance scanning
        exclude group: 'com.fasterxml.jackson.core', module: 'jackson-core'
        exclude group: 'com.fasterxml.jackson.core', module: 'jackson-annotations'
        exclude group: 'com.fasterxml.jackson.core', module: 'jackson-databind'
    }

    api group: 'org.apache.arrow', name: 'arrow-memory-netty', version: "$arrow_version"

    // Netty - data lib uses Netty event loops / executors
    api group: 'io.netty', name: 'netty-common', version: "$netty_version"

    // Netty - data lib uses netty event loops / executors
    api group: 'io.netty', name: 'netty-common', version: "$netty_version"
    api group: 'io.netty', name: 'netty-transport', version: "$netty_version"

    // Jackson used for implementations of formats included as standard
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: "$jackson_version"
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: "$jackson_databind_version"
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: "$jackson_databind_version"
    implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-csv', version: "$jackson_version"
    implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: "$jackson_databind_version"

    testImplementation project(':tracdap-lib-test')
}


// Compiling dependent targets does not require processResources to be executed by default
// E.g. running tests from the IDE will not trigger processResources - this can cause confusion!
// This dependency ensures resources are always processed, even for partial builds

compileJava.dependsOn(processResources)


// Expose test classes as a test suite available to re-use in storage plugins

configurations {
    testSuite {
        extendsFrom(testImplementation)
    }
}

task testJar(type: Jar) {
    archiveClassifier.set('test')
    from sourceSets.test.output
}

artifacts {
    testSuite testJar
}
