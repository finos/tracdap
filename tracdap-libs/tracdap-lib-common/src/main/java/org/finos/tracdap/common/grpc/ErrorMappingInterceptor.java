/*
 * Licensed to the Fintech Open Source Foundation (FINOS) under one or
 * more contributor license agreements. See the NOTICE file distributed
 * with this work for additional information regarding copyright ownership.
 * FINOS licenses this file to you under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with the
 * License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.finos.tracdap.common.grpc;

import io.grpc.*;

public class ErrorMappingInterceptor implements ServerInterceptor {

    @Override
    public <ReqT, RespT> ServerCall.Listener<ReqT> interceptCall(
            ServerCall<ReqT, RespT> serverCall, Metadata headers,
            ServerCallHandler<ReqT, RespT> next) {

        var errorMappingCall = new ErrorMappingCall<>(serverCall);
        var nextListener = next.startCall(errorMappingCall, headers);

        return new ErrorMappingListener<>(nextListener, errorMappingCall);
    }

    private static class ErrorMappingCall<ReqT, RespT> extends ForwardingServerCall.SimpleForwardingServerCall<ReqT, RespT> {

        protected ErrorMappingCall(ServerCall<ReqT, RespT> delegate) {
            super(delegate);
        }

        @Override
        public void close(Status status, Metadata trailers) {

            // For an OK result, there is no need to apply error mapping
            if (status.isOk()) {
                delegate().close(status, trailers);
                return;
            }

            // If the cause of the failure is known, use the cause for error mapping
            // For a failure with no cause, create an exception from the status object
            // The application stack trace will not be preserved, because it is not present in the status object
            // Typically this happens when the original exception is a gRPC status exception
            // For better error reporting, application code should avoid raising gRPC status exceptions directly

            var topLevelError = status.getCause() != null
                    ? status.getCause()
                    : status.asRuntimeException();

            // Perform the error mapping
            var mappedError = GrpcErrorMapping.processError(topLevelError);
            var mappedStatus = mappedError.getStatus();

            // Make sure to include any trailers generated by the error mapping in the response
            // This includes encoded TRAC error details if they are available
            // In future the gRPC rich error model might also be added
            if (mappedError.getTrailers() != null)
                trailers.merge(mappedError.getTrailers());

            delegate().close(mappedStatus, trailers);
        }
    }

    // Catch any errors that propagate from processing a request
    // Apply error mapping and close the call cleanly
    // Error mapping distinguishes handled vs. unhandled errors and responds accordingly

    private static class ErrorMappingListener<ReqT, RespT> extends ForwardingServerCallListener.SimpleForwardingServerCallListener<ReqT> {

        private final ServerCall<ReqT, RespT> serverCall;

        public ErrorMappingListener(ServerCall.Listener<ReqT> delegate, ServerCall<ReqT, RespT> serverCall) {
            super(delegate);
            this.serverCall = serverCall;
        }

        @Override
        public void onReady() {

            try {
                delegate().onReady();
            }
            catch (Throwable error) {
                var mappedError = GrpcErrorMapping.processError(error);
                serverCall.close(mappedError.getStatus(), mappedError.getTrailers());
            }
        }

        @Override
        public void onMessage(ReqT message) {

            try {
                delegate().onMessage(message);
            }
            catch (Throwable error) {
                var mappedError = GrpcErrorMapping.processError(error);
                serverCall.close(mappedError.getStatus(), mappedError.getTrailers());
            }
        }

        @Override
        public void onHalfClose() {

            try {
                delegate().onHalfClose();
            }
            catch (Throwable error) {
                var mappedError = GrpcErrorMapping.processError(error);
                serverCall.close(mappedError.getStatus(), mappedError.getTrailers());
            }
        }

        @Override
        public void onComplete() {

            try {
                delegate().onComplete();
            }
            catch (Throwable error) {
                var mappedError = GrpcErrorMapping.processError(error);
                serverCall.close(mappedError.getStatus(), mappedError.getTrailers());
            }
        }

        @Override
        public void onCancel() {

            try {
                delegate().onCancel();
            }
            catch (Throwable error) {
                var mappedError = GrpcErrorMapping.processError(error);
                serverCall.close(mappedError.getStatus(), mappedError.getTrailers());
            }
        }
    }
}
