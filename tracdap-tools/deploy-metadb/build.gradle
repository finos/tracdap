/*
 * Copyright 2020 Accenture Global Solutions Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id "application"
}

apply from: "${rootProject.projectDir.path}/gradle/base-java.gradle"
apply from: "${rootProject.projectDir.path}/gradle/functions.gradle"


description = "Deploy tool for the TRAC D.A.P. metadata store (SQL backend)"

// Put tools into a separate package group
group = "org.finos.tracdap.tools"

ext.addVersionInfo(sourceSets.getByName("main"), "TRAC Deploy Meta DB")

application {
    mainClass.set("org.finos.tracdap.tools.deploy.metadb.DeployMetaDB")
    tasks.run.workingDir = rootProject.projectDir
}

dependencies {

    implementation project(':tracdap-api-config')
    implementation project(':tracdap-lib-common')

    // The DB library can pull in runtime dependencies for SQL drivers
    // Individual drivers can be enabled/disabled via gradle/plugins.gradle
    // JARs published to Maven do not have any SQL dependencies
    // There may be licensing implications to enabling certain JDBC drivers
    // See the NOTICE file for more information on licensing restrictions

    implementation project(':tracdap-lib-db')

    implementation group: 'org.flywaydb', name: 'flyway-core', version: "$flyway_version"
}

// Bring DDL files into main JAR as resources
processResources {

    from "${project(':tracdap-svc-meta').projectDir.path}/src/schema"
}


// As of version 8, Flyway requires some databases are supported by specific Flyway modules

sourceSets {

    h2 {}
    mysql {}
    mariadb {}
    postgresql {}
    sqlserver {}
    oracle {}
}

dependencies {

    // MySQL, Maria and SQL Server have support modules maintained by Flyway
    mysqlRuntimeOnly group: 'org.flywaydb', name: 'flyway-mysql', version: "$flyway_version"
    mariadbRuntimeOnly group: 'org.flywaydb', name: 'flyway-mysql', version: "$flyway_version"
    sqlserverRuntimeOnly group: 'org.flywaydb', name: 'flyway-sqlserver', version: "$flyway_version"

    // Other DBs just require the database driver JAR, which will be pulled in by -lib-db
}

sourceSets.each { dialect ->

    if (dialect.name != "main" && dialect.name != "test") {

        def key = (String) "sql_${dialect.name}"
        def buildDriver = isFeatureEnabled(key)

        if (buildDriver) {

            println("Enabling Flyway support for SQL driver: ${dialect.name}")

            dependencies {
                runtimeOnly dialect.runtimeClasspath
            }
        }
    }
}

distributions {
    main {
        contents {
            into("") { from("${rootDir}/dist/template") }
        }
    }
}

tasks.withType(CreateStartScripts) {

    unixStartScriptGenerator.template = resources.text.fromFile("${rootDir}/dist/scripts/service-ctrl.sh")
    windowsStartScriptGenerator.template = resources.text.fromFile("${rootDir}/dist/scripts/service-ctrl.bat")

    // Default config file location
    startScripts { doLast {
        unixScript.text = unixScript.text.replace("<DEFAULT_CONFIG_FILE>", "trac-platform.yaml")
        windowsScript.text = windowsScript.text.replace("<DEFAULT_CONFIG_FILE>", "trac-platform.yaml")
    }}
}
