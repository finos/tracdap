/*
 * Copyright 2020 Accenture Global Solutions Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";
package trac.api;

option java_package = "com.accenture.trac.api";
option java_multiple_files = true;

import "trac/metadata/object_id.proto";
import "trac/metadata/data.proto";
import "trac/metadata/file.proto";
import "trac/metadata/object.proto";
import "trac/metadata/tag.proto";
import "trac/metadata/search.proto";

import "google/api/annotations.proto";


/**
 * Experimental design of the data API, for discussion and review
 */
service TracDataApi {

  /**
   * Create a new dataset by supplying both schema and data
   *
   * Request object mirrors MetadataWriteRequest for supplying tags
   * Request also includes schema, format options and the data stream
   *
   * Requires client-streaming, not yet available in gRPC-Web.
   * First message includes all metadata, subsequent are data stream only.
   */
  rpc createData (stream DataWriteRequest) returns (DataWriteResponse);

  /**
   * To support web clients where client-streaming is not available.
   * The same as createData(), but the data stream is sent as a single blob.
   */
  rpc createDataUnary (DataWriteRequest) returns (DataWriteResponse);

  /**
   * Update a dataset by supplying a data update (and optional schema update)
   *
   * Mirrors MetadataWriteRequest for specifying prior version and updating tags
   */
  rpc updateData (stream DataWriteRequest) returns (DataWriteResponse);

  /**
   * To support web clients where client-streaming is not available.
   * The same as updateData(), but the data stream is sent as a single blob.
   */
  rpc updateDataUnary (DataWriteRequest) returns (DataWriteResponse);

  /**
   * Read the contents of a dataset (in whole or in part)
   *
   * Mirrors metadata API for object selection.
   *
   * Data can be request in any format supported by the data service
   * The data stream will be translated and returned in that format
   *
   * Options available for pagination (offset/limit) and data parts.
   * Parts are retrieved for the version of the object that is selected.
   *
   * Data is returned in a stream, server-streaming is supported in gRPC-Web.
   */
  rpc readData (DataReadRequest) returns (stream DataReadResponse);


  /**
   * Upload a new file into TRAC
   *
   * Calling this method will create a new FILE object in the metadata store.
   * Tag updates can be supplied when creating a FILE, they will be passed on to the
   * metadata service. The semantics for tag updates are identical to the createObject()
   * method in TracMetadataApi.
   *
   * This is a client streaming method. The first message in the request stream
   * must contain all the request fields and required metadata. The second and subsequent
   * messages should contain the content of the file as a series of chunks (byte buffers).
   * (other fields that are set after the first message will be ignored).
   * Empty chunks can be included at any point in the stream and will be ignored.
   * Clients may choose to include the first chunk in the first message along with the
   * request metadata, or to put an empty chunk in the first message and start streaming
   * content in the second message. For very small files, it is possible to put the entire
   * content in one chunk in the first message, so there is only a single message in the stream.
   * All of these approaches are supported.
   *
   * Clients may specify the size of the file being created. When a size is supplied, TRAC
   * will check the size against the number of bytes stored. If the stored file size does not
   * match the supplied value, the error will be reported with an error status of DATA_LOSS.
   * When no size is supplied the check cannot be performed.
   *
   * The method returns the header of the newly created FILE object. Error conditions
   * include: Invalid request, unknown tenant and validation failure and data loss
   * (if the number of bytes stored does not match the number specified in the request).
   * Storage errors may also be reported if there is a problem communicating with the
   * underlying storage technology. In the event of an error, TRAC will do its best to
   * clean up any partially-written data in the storage layer.
   */
  rpc createFile (stream FileWriteRequest) returns (metadata.TagHeader);

  /**
   * Upload a new version of an existing file into TRAC
   *
   * Calling this method will update the relevant FILE object in the metadata store.
   * The latest version of the FILE must be supplied in the priorVersion field
   * of the request. For example if the latest version of a FILE object is version 2,
   * the priorVersion field should refer to version 2 and TRAC will create version 3
   * as a result of the update call. The metadata and content of prior versions
   * remain unaltered. The file name may be changed between versions, but the extension
   * and mime type must stay the same. Tag updates can be supplied when updating a FILE,
   * they will be passed on to the metadata service> The semantics for tag updates are
   * identical to the updateObject() method in TracMetadataApi.
   *
   * This is a client streaming method. The first message in the request stream
   * must contain all the request fields and required metadata. The second and subsequent
   * messages should contain the content of the file as a series of byte buffers.
   * (other fields that are set after the first message will be ignored).
   * Empty chunks can be included at any point in the stream and will be ignored.
   * Clients may choose to include the first chunk in the first message along with the
   * request metadata, or to put an empty chunk in the first message and start streaming
   * content in the second message. For very small files, it is possible to put the entire
   * content in one chunk in the first message, so there is only a single message in the stream.
   * All of these approaches are supported.
   *
   * Clients may specify the size of the file being updated. When a size is supplied, TRAC
   * will check the size against the number of bytes stored. If the stored file size does not
   * match the supplied value, the error will be reported with an error status of DATA_LOSS.
   * When no size is supplied the check cannot be performed.
   *
   * The call returns the header for the new version of the FILE object. Error conditions
   * include: Invalid request, unknown tenant, validation failure, failed preconditions
   * (e.g. extension and mime type changes) and data loss (if the number of bytes stored
   * does not match the number specified in the request). Storage errors may also be reported
   * if there is a problem communicating with the underlying storage technology. In the event
   * of an error, TRAC will do its best to clean up any partially-written data in the storage layer.
   */
  rpc updateFile (stream FileWriteRequest) returns (metadata.TagHeader);

  /**
   * Download a file that has been stored in TRAC
   *
   * The request uses a regular TagSelector to indicate which file to read. The
   * semantics of the request are identical to the readObject() method in
   * TracMetadataApi.
   *
   * This is a server streaming method. The first message in the response stream will
   * contain the response metadata (i.e. the file definition). The second
   * and subsequent messages will deliver the content of the file as a stream of chunks
   * (byte buffers). Empty chunks may be included at any point in the stream and
   * should be ignored. In particular, TRAC guarantees that the chunk in the first
   * message will always be an empty chunk. Clients are free to ignore this chunk,
   * for example if they have a separate function for processing the first message in
   * the response stream. Alternatively clients may process the empty chunk in the firs
   * message in the same way as any other chunk. Both approaches are supported.
   *
   * Error conditions include: Invalid request, unknown tenant, unknown object ID,
   * object type does not match ID, unknown object version, unknown tag version.
   * Storage errors may also be reported if there is a problem communicating with the
   * underlying storage technology.
   */
  rpc readFile (FileReadRequest) returns (stream FileReadResponse);


  /// Download a dataset in a form that can be mapped to an HTTP GET request
  rpc getData (DataGetRequest) returns (stream DataGetResponse) {
    option (google.api.http) = {
      get: "/{tenant}/DATA/{objectId}/versions/{objectVersion}"
      response_body: "content"
    };
  }

  /// Download a file in a form that can be mapped to an HTTP GET request
  rpc getFile (DataGetRequest) returns (stream DataGetResponse) {
    option (google.api.http) = {
      get: "/{tenant}/FILE/{objectId}/versions/{objectVersion}"
      response_body: "content"
    };
  }

}


message DataWriteRequest {

  string tenant = 1;

  optional metadata.TagSelector priorVersion = 2;

  repeated metadata.TagUpdate tagUpdates = 3;


  oneof schemaDefinition {
    metadata.TagSelector schemaId = 4;
    metadata.SchemaDefinition schema = 5;
  }

  // Alternative to schemaId or schema, supply schema updates to e.g. add one column
  reserved 6;
  reserved "schemaUpdates";

  bool discreteSchema = 7;

  string format = 8;
  string encoding = 9;
  map<string, string> options = 10;

  metadata.PartKey part = 11;

  bytes content = 1000;
}

message DataWriteResponse {

  metadata.TagHeader header = 1;

  uint32 size = 2;
}

message DataReadRequest {

  string tenant = 1;
  metadata.TagSelector selector = 2;

  string format = 3;
  string encoding = 4;

  metadata.PartKey part = 5;
  optional uint64 offset = 6;
  optional uint32 limit = 7;
}

message DataReadResponse {

  uint32 size = 1;
  bool finished = 2;

  bytes content = 1000;
}


/**
 * Request to create or update a FILE and store content to the platform
 *
 * @see TracDataApi.createFile()
 * @see TracDataApi.updateFile()
 */
message FileWriteRequest {

  /**
   * Tenant code for the requested operation, always required
   */
  string tenant = 1;

  /**
   * Prior object/tag version to use for update operations
   *
   * This field should be omitted when creating a new file.
   */
  optional metadata.TagSelector priorVersion = 2;

  /**
   * Tag update operations to be applied
   *
   * Tag updates are applied in exactly the same way as for metadata write requests.
   *
   * @see MetadataWriteRequest
   * @see TracMetadataApi
   */
  repeated metadata.TagUpdate tagUpdates = 3;

  /**
   * File name of the file being saved, always required
   *
   * Must be a valid file name with no path component (i.e. the name may not contain slashes).
   *
   * If the name contains a period character, the file extension will be set as the
   * portion of the name following the last period. Otherwise the file extension will be blank.
   *
   * For update requests the name may change but the extension must stay the same. E.g. a file
   * can be created as "my_file_v1.txt" and updated as "my_file_v2.txt", but updating with the
   * name as "my_file_v1.doc" would not be allowed. Attempting to change the extension in an
   * update will result in an error status of FAILED_PRECONDITION.
   *
   * Fle name and extension are stored in the file definition, and in the trac_file_name
   * and trac_file_extension attributes.
   */
  string name = 4;

  /**
   * Mime type of the file being saved, always required
   *
   * Must be a valid mime type. For update requests, the mime type must match exactly
   * with the mime type supplied when the file was originally created. Attempting to change
   * the mime type in an update will result in an error status of FAILED_PRECONDITION.
   *
   * Mime type is stored in the file definition and in the trac_file_mime_type attribute.
   */
  string mimeType = 5;

  /**
   * Size of the file being saved, if known in advance
   *
   * When a size is supplied, TRAC will check the size against the number of bytes stored.
   * If the stored file size does not match the supplied value, the error will be reported
   * with an error status of DATA_LOSS. When no size is supplied the check cannot be performed.
   *
   * File size is stored in the created file definition and in the trac_file_size attribute.
   */
  optional uint64 size = 6;

  /**
   * A chunk of the file content
   *
   * The file content should be sent as a stream of chunks (byte buffers), with one chunk in each message.
   * Empty chunks can be included at any point in the request stream and will be ignored.
   */
  bytes content = 1000;
}


/**
 * Request to read a FILE, i.e. retrieve its content from the platform
 *
 * @see TracDataApi
 */
message FileReadRequest {

  /**
   * Tenant code for the requested operation, always required
   */
  string tenant = 1;

  /**
   * Selector for the FILE being read
   */
  metadata.TagSelector selector = 2;
}


/**
 * Response to a request to read a FILE, i.e. retrieve its content from the platform
 *
 * @see TracDataApi.readFile()
 */
message FileReadResponse {

  /**
   * Definition of the FILE being read
   */
  optional metadata.FileDefinition fileDefinition = 1;

  /**
   * A chunk of the file content
   *
   * The file content will be sent as a stream of chunks (byte buffers), with one chunk in each message.
   * Empty chunks may be included at any point in the response stream and should be ignored.
   * In particular, TRAC guarantees that the chunk in the first message will always be an empty chunk.
   */
  bytes content = 1000;
}



message DataGetRequest {

  string tenant = 1;
  string objectId = 2;
  optional int32 objectVersion = 3;

  string format = 4;
  string encoding = 5;

  metadata.PartKey part = 6;
  optional uint64 offset = 7;
  optional uint32 limit = 8;
}

message DataGetResponse {

  bytes content = 1;
}
