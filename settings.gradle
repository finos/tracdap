/*
 * Copyright 2020 Accenture Global Solutions Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply from: "${rootProject.projectDir.path}/gradle/versions.gradle"

rootProject.name = 'tracdap'

pluginManagement.plugins {
    id 'com.google.protobuf' version "${proto_plugin_version}"
}

dependencyResolutionManagement {

    // Force versions for key parts of the dependency stack
    // This ensures all the core frameworks are on one consistent version across the project

    // For example: Suppose the AWS plugin has a transitive dependencies on Netty and Jackson
    // This will force those libraries to match the versions declared by TRAC in versions.gradle
    // That may not be the same as the versions declared in the AWS SDK BOM
    // But this seems less dangerous than having two versions of the same framework on the classpath
    // Also from a compliance point of view, transitive dependencies on old library versions is a problem

    components.all { lib ->

        if (lib.id.group == "io.netty")
            lib.belongsTo("io.netty:netty-bom:${netty_version}")

        if (lib.id.group == "io.grpc")
            lib.belongsTo("io.grpc:grpc-bom:${grpc_version}")

        if (lib.id.group == "com.google.protobuf")
            lib.belongsTo("com.google.protobuf:protobuf-bom:${proto_version}")

        if (lib.id.group == "com.google.guava")
            lib.belongsTo("com.google.guava:guava-bom:${guava_version}")

        if (lib.id.group.startsWith("com.fasterxml.jackson"))
            lib.belongsTo("com.fasterxml.jackson:jackson-bom:${jackson_version}")

        if (lib.id.group == "org.slf4j")
            lib.belongsTo("org.slf4j:slf4j-parent:${slf4j_version}")

        if (lib.id.group == "org.apache.logging.log4j")
            lib.belongsTo("org.apache.logging.log4j:log4j-bom:${slf4j_version}")

        // Closure should return a value
        null
    }
}

// API components

include 'tracdap-api-metadata'
include 'tracdap-api-config'
include 'tracdap-api-services'

project(":tracdap-api-metadata").projectDir = file("tracdap-api/tracdap-metadata")
project(":tracdap-api-config").projectDir = file("tracdap-api/tracdap-config")
project(":tracdap-api-services").projectDir = file("tracdap-api/tracdap-services")


// Java libraries


include 'tracdap-lib-annotations'
include 'tracdap-lib-common'
include 'tracdap-lib-auth'
include 'tracdap-lib-validation'
include 'tracdap-lib-db'
include 'tracdap-lib-data'
include 'tracdap-lib-orch'
include 'tracdap-lib-test'

project(":tracdap-lib-annotations").projectDir = file("tracdap-libs/tracdap-lib-annotations")
project(":tracdap-lib-common").projectDir = file("tracdap-libs/tracdap-lib-common")
project(":tracdap-lib-auth").projectDir = file("tracdap-libs/tracdap-lib-auth")
project(":tracdap-lib-validation").projectDir = file("tracdap-libs/tracdap-lib-validation")
project(":tracdap-lib-db").projectDir = file("tracdap-libs/tracdap-lib-db")
project(":tracdap-lib-data").projectDir = file("tracdap-libs/tracdap-lib-data")
project(":tracdap-lib-orch").projectDir = file("tracdap-libs/tracdap-lib-orch")
project(":tracdap-lib-test").projectDir = file("tracdap-libs/tracdap-lib-test")


// Java services

include 'tracdap-svc-meta'
include 'tracdap-svc-data'
include 'tracdap-svc-orch'
include 'tracdap-gateway'
include 'tracdap-webserver'

project(":tracdap-svc-meta").projectDir = file("tracdap-services/tracdap-svc-meta")
project(":tracdap-svc-data").projectDir = file("tracdap-services/tracdap-svc-data")
project(":tracdap-svc-orch").projectDir = file("tracdap-services/tracdap-svc-orch")
project(":tracdap-gateway").projectDir = file("tracdap-services/tracdap-gateway")
project(":tracdap-webserver").projectDir = file("tracdap-services/tracdap-webserver")



// Tools and utilities

include 'deploy-metadb'
include 'secret-tool'

project(":deploy-metadb").projectDir = file("tracdap-tools/deploy-metadb")
project(":secret-tool").projectDir = file("tracdap-tools/secret-tool")


// Plugins

include 'sql-postgresql'
include 'sql-sqlserver'

project(":sql-postgresql").projectDir = file("tracdap-plugins/sql-postgresql")
project(":sql-sqlserver").projectDir = file("tracdap-plugins/sql-sqlserver")


// AWS config plugin still uses AWS v1 API - needs porting to V2
//include 'aws-config'
//project(":aws-config").projectDir = file("tracdap-plugins/aws-config")

include 'aws-storage'
project(":aws-storage").projectDir = file("tracdap-plugins/aws-storage")

include 'gcp-config'
include 'gcp-storage'
project(":gcp-config").projectDir = file("tracdap-plugins/gcp-config")
project(":gcp-storage").projectDir = file("tracdap-plugins/gcp-storage")

include 'exec-ssh'
project(":exec-ssh").projectDir = file("tracdap-plugins/exec-ssh")
