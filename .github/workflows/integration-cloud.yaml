name: Integration (Cloud)

on:
  workflow_call:
    inputs:
      service:
        required: true
        type: string
      target:
        required: true
        type: string
      protocol:
        required: true
        type: string
      matrix:
        required: true
        type: string
      enabled:
        required: true
        type: boolean
      has_java:
        required: true
        type: boolean
      has_python:
        required: true
        type: boolean


# Use latest supported language versions for integration testing
env:
  JAVA_VERSION: "21"
  JAVA_DISTRIBUTION: "zulu"
  PYTHON_VERSION: "3.12"
  NODE_VERSION: "18"


jobs:

  java-integration:

    name: int-java-${{ inputs.service }}-${{ inputs.protocol }}

    env: ${{ fromJson( inputs.matrix ) }}
    if: ${{ inputs.enabled && inputs.has_java }}

    runs-on: ubuntu-latest
    environment: integration
    timeout-minutes: 20

    # To use apt-get install, jobs must run in a container
    container:
      image: ubuntu:latest

    steps:

      # fetch-depth = 0 is needed to get tags for version info
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install required packages
        if: ${{ env.INSTALL_SCRIPT != '' }}
        env: ${{ vars }}
        run: |
          ${{ env.INSTALL_SCRIPT }}

      # Using IdP for AWS, set the repo secret AWS_CI_ROLE to use
      # https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-amazon-web-services
      # https://github.com/aws-actions/configure-aws-credentials

      - name: Authenticate to AWS
        if: ${{ inputs.target == 'aws' }}
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_CI_ROLE }}
          role-session-name: tracdap-ci-session
          aws-region: ${{ vars.TRAC_AWS_REGION }}

      # Using IdP for GCP
      # https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-google-cloud-platform
      # https://github.com/google-github-actions/auth

      - name: Authenticate to GCP
        if: ${{ inputs.target == 'gcp' }}
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: projects/158849182108/locations/global/workloadIdentityPools/github/providers/github
          service_account: ${{ secrets.GCP_CI_USER }}

      # Using IdP for Azure
      # https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-azure
      # https://github.com/Azure/login

      - name: Authenticate to Azure
        if: ${{ inputs.target == 'azure' }}
        # There was a breaking change in azure/login, so we need to force the version
        # https://github.com/Azure/login/issues/403
        uses: azure/login@v1.6.1
        with:
          client-id: ${{ secrets.AZURE_CI_CLIENT }}
          tenant-id: ${{ secrets.AZURE_CI_TENANT }}
          subscription-id: ${{ secrets.AZURE_CI_SUBSCRIPTION }}

      - name: Integration setup script
        if: ${{ env.SETUP_SCRIPT != '' }}
        env: ${{ vars }}
        run: |
          ${{ env.SETUP_SCRIPT }}

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          java-version: ${{ env.JAVA_VERSION }}
          cache: gradle

      - name: Build Java
        run: ./gradlew testClasses

      # Auth tool will also create the secrets file if it doesn't exist
      - name: Prepare secrets
        run: |
          ./gradlew secret-tool:run --args="--config ${{ env.TRAC_CONFIG_FILE }} --task init_secrets"
          ./gradlew secret-tool:run --args="--config ${{ env.TRAC_CONFIG_FILE }} --task create_root_auth_key EC 256"

      # No need to prepare DB, it is done by the platform test setup

      - name: Integration tests
        env: ${{ vars }}
        run: ./gradlew integration -DintegrationTags="${{ env.JAVA_TESTS }} & ( ${{ inputs.target }}-platform | all-platforms )"

      # If the tests fail, make the output available for download
      # Include build/modules and build/plugins
      - name: Store failed test results
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: junit-test-results
          path: build/*/*/reports/**
          retention-days: 7

      - name: Integration teardown script
        if: ${{ env.TEARDOWN_SCRIPT != '' }}
        run: |
          ${{ env.TEARDOWN_SCRIPT }}


  python-integration:

    name: int-python-${{ inputs.service }}-${{ inputs.protocol }}

    if: ${{ inputs.enabled && inputs.has_python }}
    env: ${{ fromJson( inputs.matrix ) }}

    runs-on: ubuntu-latest
    environment: integration
    timeout-minutes: 20

    # To use apt-get install, jobs must run in a container
    container:
      image: ubuntu:latest

    steps:

      # fetch-depth = 0 is needed to get tags for version info
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install required packages
        if: ${{ env.INSTALL_SCRIPT != '' }}
        env: ${{ vars }}
        run: |
          ${{ env.INSTALL_SCRIPT }}

      # Using IdP for AWS, set the repo secret AWS_CI_ROLE to use
      # https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-amazon-web-services
      # https://github.com/aws-actions/configure-aws-credentials

      - name: Authenticate to AWS
        if: ${{ inputs.target == 'aws' }}
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_CI_ROLE }}
          role-session-name: tracdap-ci-session
          aws-region: ${{ vars.TRAC_AWS_REGION }}

      # Using IdP for GCP
      # https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-google-cloud-platform
      # https://github.com/google-github-actions/auth

      - name: Authenticate to GCP
        if: ${{ inputs.target == 'gcp' }}
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: projects/158849182108/locations/global/workloadIdentityPools/github/providers/github
          service_account: ${{ secrets.GCP_CI_USER }}

      # Using IdP for Azure
      # https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-azure
      # https://github.com/Azure/login

      - name: Authenticate to Azure
        if: ${{ inputs.target == 'azure' }}
        # There was a breaking change in azure/login, so we need to force the version
        # https://github.com/Azure/login/issues/403
        uses: azure/login@v1.6.1
        with:
          client-id: ${{ secrets.AZURE_CI_CLIENT }}
          tenant-id: ${{ secrets.AZURE_CI_TENANT }}
          subscription-id: ${{ secrets.AZURE_CI_SUBSCRIPTION }}

      - name: Integration setup script
        if: ${{ env.SETUP_SCRIPT != '' }}
        env: ${{ vars }}
        run: |
          ${{ env.SETUP_SCRIPT }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Upgrade PIP
        run: |
          python -m venv ./venv
          . ./venv/bin/activate
          python -m pip install --upgrade pip

      - name: Install dependencies
        run: |
          . ./venv/bin/activate
          cd tracdap-runtime/python
          pip install -r requirements.txt
          pip install -r requirements_plugins.txt

      - name: Protoc code generation
        run: |
          . ./venv/bin/activate
          python tracdap-runtime/python/build_runtime.py --target codegen

      - name: Integration tests
        env: ${{ vars }}
        run: | 
          . ./venv/bin/activate
          python tracdap-runtime/python/build_runtime.py --target integration --pattern ${{ env.PYTHON_TESTS }}

      - name: Integration teardown script
        if: ${{ env.TEARDOWN_SCRIPT != '' }}
        run: |
          ${{ env.TEARDOWN_SCRIPT }}
