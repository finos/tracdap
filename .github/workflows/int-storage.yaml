
on:
  workflow_call:
    inputs:
      service:
        required: true
        type: string
      protocol:
        required: true
        type: string
      matrix:
        required: true
        type: string
      enabled:
        required: true
        type: boolean
      has_java:
        required: true
        type: boolean
      has_python:
        required: true
        type: boolean


env:
  JAVA_VERSION: 17
  JAVA_DISTRIBUTION: zulu
  PYTHON_VERSION: "3.11"


jobs:

  java-integration:

    name: int-java-${{ inputs.service }}-${{ inputs.protocol }}

    env: ${{ fromJson( inputs.matrix ) }}
    if: ${{ inputs.enabled && inputs.has_java }}

    runs-on: ubuntu-latest
    timeout-minutes: 5

    # To use apt-get install, jobs must run in a container
    container:
      image: ubuntu:latest

    steps:

      # fetch-depth = 0 is needed to get tags for version info
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install JQ
        run: |
          apt-get update
          apt-get upgrade -y
          apt-get install -y jq

      - name: Integration setup script
        if: ${{ env.SETUP_SCRIPT != '' }}
        env:
          ${{ env.STORAGE_SECRET }}: ${{ secrets[ env.STORAGE_SECRET ] }}
        run: |
          $( echo '${{ toJson(vars) }}' | jq -r 'to_entries[] | "export " + .key + "=\"" + .value + "\""' )
          ${{ env.SETUP_SCRIPT }}

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          java-version: ${{ env.JAVA_VERSION }}
          cache: gradle

      - name: Build Java
        run: ./gradlew testClasses

      # Auth tool will also create the secrets file if it doesn't exist
      - name: Prepare secrets
        env:
          ${{ env.STORAGE_SECRET }}: ${{ secrets[ env.STORAGE_SECRET ] }}
        run: |
          ./gradlew secret-tool:run --args="--config ${{ env.TRAC_CONFIG_FILE }} --task init_secrets"
          ./gradlew secret-tool:run --args="--config ${{ env.TRAC_CONFIG_FILE }} --task create_root_auth_key EC 256"

          echo "${{ env[ env.STORAGE_SECRET ] }}" | ./gradlew secret-tool:run --args="--config ${{ env.TRAC_CONFIG_FILE }} --task add_secret storage_secret"

      # No need to prepare DB, it is done by the platform test setup

      - name: Integration tests
        env:
          ${{ env.STORAGE_SECRET }}: ${{ secrets[ env.STORAGE_SECRET ] }}
        run: |
          $( echo '${{ toJson(vars) }}' | jq -r 'to_entries[] | "export " + .key + "=" + .value' )
          ./gradlew integration -DintegrationTags="${{ env.JAVA_TESTS }}"

      # If the tests fail, make the output available for download
      - name: Store failed test results
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: junit-test-results
          path: build/plugins/*/reports/**
          retention-days: 7

      - name: Integration teardown script
        if: ${{ env.TEARDOWN_SCRIPT != '' }}
        run: ${{ env.TEARDOWN_SCRIPT }}


  python-integration:

    name: int-python-${{ inputs.service }}-${{ inputs.protocol }}

    if: ${{ inputs.enabled && inputs.has_python }}
    env: ${{ fromJson( inputs.matrix ) }}

    runs-on: ubuntu-latest
    timeout-minutes: 5

    # To use apt-get install, jobs must run in a container
    container:
      image: ubuntu:latest

    steps:

      # fetch-depth = 0 is needed to get tags for version info
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install JQ
        run: |
          apt-get update
          apt-get upgrade -y
          apt-get install -y jq

      - name: Integration setup script
        if: ${{ env.SETUP_SCRIPT != '' }}
        env:
          ${{ env.STORAGE_SECRET }}: ${{ secrets[ env.STORAGE_SECRET ] }}
        run: |
          $( echo '${{ toJson(vars) }}' | jq -r 'to_entries[] | "export " + .key + "=\"" + .value + "\""' )
          ${{ env.SETUP_SCRIPT }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Integration teardown script
        if: ${{ env.TEARDOWN_SCRIPT != '' }}
        run: ${{ env.TEARDOWN_SCRIPT }}
