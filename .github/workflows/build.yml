name: Build and Test

# Run the main build and test for all branch pushes and pull requests, do not repeat the build for tags
on:
  push:
    branches:
      - '**'
  pull_request:


env:
  JAVA_DISTRIBUTION: zulu
  NODE_VERSION: 14.x


jobs:

  platform_build:

    runs-on: ubuntu-latest
    timeout-minutes: 20

    strategy:
      matrix:
        JAVA_VERSION:
          - 11
          - 17

    steps:

    # fetch-depth = 0 is needed to get tags for version info
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Set up Java
      uses: actions/setup-java@v2
      with:
        distribution: ${{ env.JAVA_DISTRIBUTION }}
        java-version: ${{ matrix.JAVA_VERSION }}

        # Turn on Gradle dependency caching
        cache: gradle

    - name: Build
      run: ./gradlew build -x test

    - name: Unit tests
      run: ./gradlew test

    # If the tests fail, make the output available for download
    - name: Store failed test results
      uses: actions/upload-artifact@v2
      if: failure()
      with:
        name: junit-test-results
        path: build/modules/*/reports/**
        retention-days: 7


  python_runtime:

    runs-on: ubuntu-latest
    timeout-minutes: 20

    # Testing targets for the Python model runtime
    # Include the latest stable release (3.9)
    # Oldest supported version is 3.6, this is required by Pandas 1.0
    # (also note Python 3.5 is EOL, final release 3.5.10 was in September 2020)
    # Do not include 2.7 - that ship has sailed!
    strategy:

      # Try to finish all jobs - it can be helpful to see if some succeed and others fail
      fail-fast: false

      matrix:
        enviroment:

          - { ENV_NAME: "Latest: Python 3.10, PySpark 3.2.x, Pandas >= 1.3",
              PYTHON_VERSION: "3.10",
              PYSPARK_VERSION: ">= 3.2.0, < 3.3.0",
              PANDAS_VERSION: ">= 1.3.0, < 2.0.0",
              PYPANDOC: false }

          - { ENV_NAME: "Middle: Python 3.8, PySpark 3.0.x, Pandas 1.1",
              PYTHON_VERSION: "3.8",
              PYSPARK_VERSION: ">= 3.0.0, < 3.1.0",
              PANDAS_VERSION: ">= 1.1.0, < 1.2.0",
              PYPANDOC: false }

          - { ENV_NAME: "Oldest: Python 3.7, PySpark 2.4.0, Pandas 1.0.0",
              PYTHON_VERSION: "3.7",
              PYSPARK_VERSION: "== 2.4.0",
              PANDAS_VERSION: "== 1.0.0",
              PYPANDOC: true }

    steps:

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.enviroment.PYTHON_VERSION }}

      - name: PIP Upgrade
        run: python -m pip install --upgrade pip

      # fetch-depth = 0 is needed to get tags for version info
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # PyPanDoc dependency is not managed correctly by PySpark 2.4 package
      # It needs to be installed explicitly first
      - name: Install pre-req dependencies
        if: ${{ matrix.enviroment.PYPANDOC }}
        run: |
          pip install pypandoc

      - name: Install dependencies
        run: |
          pip install "pyspark ${{ matrix.enviroment.PYSPARK_VERSION }}"
          pip install "pandas ${{ matrix.enviroment.PANDAS_VERSION }}"
          cd tracdap-runtime/python
          pip install -r requirements.txt

      - name: Protoc code generation
        run: |
          python dev/codegen/protoc-ctrl.py python_runtime \
            --proto_path tracdap-api/tracdap-metadata/src/main/proto \
            --proto_path tracdap-api/tracdap-config/src/main/proto \
            --out tracdap-runtime/python/generated/tracdap/rt_gen/domain
          python dev/codegen/protoc-ctrl.py python_proto \
            --proto_path tracdap-api/tracdap-metadata/src/main/proto \
            --proto_path tracdap-api/tracdap-config/src/main/proto \
            --out tracdap-runtime/python/generated/tracdap/rt_gen/proto

      - name: Unit tests
        run: |
          export PYTHONPATH=tracdap-runtime/python/generated
          export PYTHONPATH=tracdap-runtime/python/src:$PYTHONPATH
          export PYTHONPATH=tracdap-runtime/python/test:$PYTHONPATH
          python -m unittest discover -s tracdap-runtime/python/test/tracdap_test -t tracdap-runtime/python/test

      - name: Python example models
        run: |
          export PYTHONPATH=tracdap-runtime/python/generated
          export PYTHONPATH=tracdap-runtime/python/src:$PYTHONPATH
          export PYTHONPATH=tracdap-runtime/python/test:$PYTHONPATH
          python -m unittest discover -s tracdap-runtime/python/test/tracdap_examples -t tracdap-runtime/python/test


  web_api:

    runs-on: ubuntu-latest

    steps:

    # fetch-depth = 0 is needed to get tags for version info
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: npm
        cache-dependency-path: tracdap-api/packages/web/package-lock.json

    - name: Install dependencies
      run: |
        cd tracdap-api/packages/web
        npm install

    - name: Build API
      run: |
        cd tracdap-api/packages/web
        npm run buildApi


  documentation:

    runs-on: ubuntu-latest

    steps:

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: PIP Upgrade
        run: python -m pip install --upgrade pip

      # fetch-depth = 0 is needed to get tags for version info
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Install dependencies for build tools
        run: |
          cd dev/
          pip install -r requirements.txt

      - name: Run all docgen targets
        run: |
          cd dev/
          python docgen/docgen-ctrl.py all
